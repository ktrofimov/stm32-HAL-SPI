
STM32G4-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020b8  080020b8  000120b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c8  080020c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020cc  080020cc  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080020dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080020dc  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c46  00000000  00000000  0002bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d5f  00000000  00000000  0002f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba01  00000000  00000000  00030d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b32bd  00000000  00000000  0003c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efa4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000efaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080020a0 	.word	0x080020a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080020a0 	.word	0x080020a0

08000218 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800021c:	4b1f      	ldr	r3, [pc, #124]	; (800029c <MX_FDCAN1_Init+0x84>)
 800021e:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <MX_FDCAN1_Init+0x88>)
 8000220:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000222:	4b1e      	ldr	r3, [pc, #120]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000224:	2200      	movs	r2, #0
 8000226:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <MX_FDCAN1_Init+0x84>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800022e:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000236:	2200      	movs	r2, #0
 8000238:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_FDCAN1_Init+0x84>)
 800023c:	2200      	movs	r2, #0
 800023e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000242:	2200      	movs	r2, #0
 8000244:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000248:	2201      	movs	r2, #1
 800024a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <MX_FDCAN1_Init+0x84>)
 800024e:	2201      	movs	r2, #1
 8000250:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000254:	2202      	movs	r2, #2
 8000256:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_FDCAN1_Init+0x84>)
 800025a:	2202      	movs	r2, #2
 800025c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000260:	2201      	movs	r2, #1
 8000262:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000266:	2201      	movs	r2, #1
 8000268:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_FDCAN1_Init+0x84>)
 800026c:	2201      	movs	r2, #1
 800026e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000272:	2201      	movs	r2, #1
 8000274:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000278:	2200      	movs	r2, #0
 800027a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_FDCAN1_Init+0x84>)
 800027e:	2200      	movs	r2, #0
 8000280:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_FDCAN1_Init+0x84>)
 8000284:	2200      	movs	r2, #0
 8000286:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_FDCAN1_Init+0x84>)
 800028a:	f000 fb47 	bl	800091c <HAL_FDCAN_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000294:	f000 f8de 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000028 	.word	0x20000028
 80002a0:	40006400 	.word	0x40006400

080002a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a18      	ldr	r2, [pc, #96]	; (8000324 <HAL_FDCAN_MspInit+0x80>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d129      	bne.n	800031a <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ca:	4a17      	ldr	r2, [pc, #92]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002d0:	6593      	str	r3, [r2, #88]	; 0x58
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002da:	613b      	str	r3, [r7, #16]
 80002dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	4a11      	ldr	r2, [pc, #68]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <HAL_FDCAN_MspInit+0x84>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80002fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002fc:	2302      	movs	r3, #2
 80002fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	2300      	movs	r3, #0
 8000302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000308:	2309      	movs	r3, #9
 800030a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030c:	f107 0314 	add.w	r3, r7, #20
 8000310:	4619      	mov	r1, r3
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f000 fcb1 	bl	8000c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800031a:	bf00      	nop
 800031c:	3728      	adds	r7, #40	; 0x28
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40006400 	.word	0x40006400
 8000328:	40021000 	.word	0x40021000

0800032c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_GPIO_Init+0x5c>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <MX_GPIO_Init+0x5c>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_GPIO_Init+0x5c>)
 800034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f000 fe0e 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000364:	2310      	movs	r3, #16
 8000366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	2301      	movs	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 fc7e 	bl	8000c7c <HAL_GPIO_Init>

}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 f96f 	bl	8000672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f807 	bl	80003a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f7ff ffc8 	bl	800032c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800039c:	f7ff ff3c 	bl	8000218 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80003a0:	f000 f85e 	bl	8000460 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x18>

080003a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b0a4      	sub	sp, #144	; 0x90
 80003aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003b0:	2238      	movs	r2, #56	; 0x38
 80003b2:	2100      	movs	r1, #0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fe6b 	bl	8002090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2244      	movs	r2, #68	; 0x44
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fe5d 	bl	8002090 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003da:	f000 fde9 	bl	8000fb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003de:	2302      	movs	r3, #2
 80003e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e8:	2340      	movs	r3, #64	; 0x40
 80003ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fe8f 	bl	8001118 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000400:	f000 f828 	bl	8000454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000408:	2301      	movs	r3, #1
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000418:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f001 f992 	bl	8001748 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800042a:	f000 f813 	bl	8000454 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800042e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000432:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000438:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fb67 	bl	8001b10 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000448:	f000 f804 	bl	8000454 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3790      	adds	r7, #144	; 0x90
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <MX_SPI1_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_SPI1_Init+0x74>)
 800046c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_SPI1_Init+0x74>)
 800047a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800047e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000480:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_SPI1_Init+0x74>)
 800048e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000492:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004ae:	2207      	movs	r2, #7
 80004b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004ba:	2208      	movs	r2, #8
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_SPI1_Init+0x74>)
 80004c0:	f001 fd16 	bl	8001ef0 <HAL_SPI_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f7ff ffc3 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	40013000 	.word	0x40013000

080004dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <HAL_SPI_MspInit+0x7c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d128      	bne.n	8000550 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <HAL_SPI_MspInit+0x80>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <HAL_SPI_MspInit+0x80>)
 8000504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000508:	6613      	str	r3, [r2, #96]	; 0x60
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_SPI_MspInit+0x80>)
 800050c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_SPI_MspInit+0x80>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <HAL_SPI_MspInit+0x80>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_SPI_MspInit+0x80>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800052e:	23e0      	movs	r3, #224	; 0xe0
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800053e:	2305      	movs	r3, #5
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fb96 	bl	8000c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000550:	bf00      	nop
 8000552:	3728      	adds	r7, #40	; 0x28
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40013000 	.word	0x40013000
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <HAL_MspInit+0x44>)
 8000568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <HAL_MspInit+0x44>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6613      	str	r3, [r2, #96]	; 0x60
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_MspInit+0x44>)
 8000574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_MspInit+0x44>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <HAL_MspInit+0x44>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	6593      	str	r3, [r2, #88]	; 0x58
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_MspInit+0x44>)
 800058c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000596:	f000 fdaf 	bl	80010f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f4:	f000 f890 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x20>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <SystemInit+0x20>)
 8000608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0b      	ldr	r4, [pc, #44]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800064a:	f7ff ffd7 	bl	80005fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800064e:	f001 fcfb 	bl	8002048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fe9b 	bl	800038c <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	080020d0 	.word	0x080020d0
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	200000f4 	.word	0x200000f4

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>

08000672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f91b 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f80e 	bl	80006a4 <HAL_InitTick>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e001      	b.n	8000698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000694:	f7ff ff64 	bl	8000560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000698:	79fb      	ldrb	r3, [r7, #7]

}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <HAL_InitTick+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d022      	beq.n	80006fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_InitTick+0x6c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <HAL_InitTick+0x68>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f918 	bl	8000902 <HAL_SYSTICK_Config>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10f      	bne.n	80006f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d809      	bhi.n	80006f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006de:	2200      	movs	r2, #0
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e6:	f000 f8f2 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_InitTick+0x70>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e007      	b.n	8000702 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e004      	b.n	8000702 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e001      	b.n	8000702 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000008 	.word	0x20000008
 8000710:	20000000 	.word	0x20000000
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x1c>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x20>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4413      	add	r3, r2
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <HAL_IncTick+0x1c>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200000f0 	.word	0x200000f0
 8000738:	20000008 	.word	0x20000008

0800073c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_GetTick+0x14>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000f0 	.word	0x200000f0

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff47 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff5e 	bl	800079c <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff90 	bl	800080c <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5f 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ffb2 	bl	8000874 <SysTick_Config>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e147      	b.n	8000bbe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d106      	bne.n	8000948 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fcae 	bl	80002a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f022 0210 	bic.w	r2, r2, #16
 8000956:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000958:	f7ff fef0 	bl	800073c <HAL_GetTick>
 800095c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800095e:	e012      	b.n	8000986 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000960:	f7ff feec 	bl	800073c <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d90b      	bls.n	8000986 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f043 0201 	orr.w	r2, r3, #1
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2203      	movs	r2, #3
 800097e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e11b      	b.n	8000bbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	2b08      	cmp	r3, #8
 8000992:	d0e5      	beq.n	8000960 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a4:	f7ff feca 	bl	800073c <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009aa:	e012      	b.n	80009d2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009ac:	f7ff fec6 	bl	800073c <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d90b      	bls.n	80009d2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f043 0201 	orr.w	r2, r3, #1
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2203      	movs	r2, #3
 80009ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e0f5      	b.n	8000bbe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0e5      	beq.n	80009ac <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	699a      	ldr	r2, [r3, #24]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0202 	orr.w	r2, r2, #2
 80009ee:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a74      	ldr	r2, [pc, #464]	; (8000bc8 <HAL_FDCAN_Init+0x2ac>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d103      	bne.n	8000a02 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80009fa:	4a74      	ldr	r2, [pc, #464]	; (8000bcc <HAL_FDCAN_Init+0x2b0>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7c1b      	ldrb	r3, [r3, #16]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d108      	bne.n	8000a1c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a18:	619a      	str	r2, [r3, #24]
 8000a1a:	e007      	b.n	8000a2c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	699a      	ldr	r2, [r3, #24]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a2a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7c5b      	ldrb	r3, [r3, #17]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d108      	bne.n	8000a46 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a42:	619a      	str	r2, [r3, #24]
 8000a44:	e007      	b.n	8000a56 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	699a      	ldr	r2, [r3, #24]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a54:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7c9b      	ldrb	r3, [r3, #18]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	e007      	b.n	8000a80 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	699a      	ldr	r2, [r3, #24]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000aa4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0210 	bic.w	r2, r2, #16
 8000ab4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d108      	bne.n	8000ad0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f042 0204 	orr.w	r2, r2, #4
 8000acc:	619a      	str	r2, [r3, #24]
 8000ace:	e02c      	b.n	8000b2a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d028      	beq.n	8000b2a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d01c      	beq.n	8000b1a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	699a      	ldr	r2, [r3, #24]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000aee:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0210 	orr.w	r2, r2, #16
 8000afe:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d110      	bne.n	8000b2a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0220 	orr.w	r2, r2, #32
 8000b16:	619a      	str	r2, [r3, #24]
 8000b18:	e007      	b.n	8000b2a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	699a      	ldr	r2, [r3, #24]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0220 	orr.w	r2, r2, #32
 8000b28:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b3a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b42:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b52:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b54:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b5e:	d115      	bne.n	8000b8c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b6e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	3b01      	subs	r3, #1
 8000b76:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b78:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b80:	3b01      	subs	r3, #1
 8000b82:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b88:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b8a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f814 	bl	8000bd0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40006400 	.word	0x40006400
 8000bcc:	40006500 	.word	0x40006500

08000bd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000bda:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	041a      	lsls	r2, r3, #16
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c18:	061a      	lsls	r2, r3, #24
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e005      	b.n	8000c5e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3f3      	bcc.n	8000c52 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	4000a400 	.word	0x4000a400

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c8a:	e15a      	b.n	8000f42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 814c 	beq.w	8000f3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d00b      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cb8:	2b11      	cmp	r3, #17
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	d130      	bne.n	8000d26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	f003 0201 	and.w	r2, r3, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0xea>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d123      	bne.n	8000dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	08da      	lsrs	r2, r3, #3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3208      	adds	r2, #8
 8000da8:	6939      	ldr	r1, [r7, #16]
 8000daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0203 	and.w	r2, r3, #3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80a6 	beq.w	8000f3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df0:	4b5b      	ldr	r3, [pc, #364]	; (8000f60 <HAL_GPIO_Init+0x2e4>)
 8000df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df4:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <HAL_GPIO_Init+0x2e4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfc:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <HAL_GPIO_Init+0x2e4>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e08:	4a56      	ldr	r2, [pc, #344]	; (8000f64 <HAL_GPIO_Init+0x2e8>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e32:	d01f      	beq.n	8000e74 <HAL_GPIO_Init+0x1f8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <HAL_GPIO_Init+0x2ec>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d019      	beq.n	8000e70 <HAL_GPIO_Init+0x1f4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a4b      	ldr	r2, [pc, #300]	; (8000f6c <HAL_GPIO_Init+0x2f0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d013      	beq.n	8000e6c <HAL_GPIO_Init+0x1f0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x2f4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00d      	beq.n	8000e68 <HAL_GPIO_Init+0x1ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2f8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d007      	beq.n	8000e64 <HAL_GPIO_Init+0x1e8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2fc>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d101      	bne.n	8000e60 <HAL_GPIO_Init+0x1e4>
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	e00a      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e60:	2306      	movs	r3, #6
 8000e62:	e008      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e64:	2304      	movs	r3, #4
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1fa>
 8000e74:	2300      	movs	r3, #0
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e86:	4937      	ldr	r1, [pc, #220]	; (8000f64 <HAL_GPIO_Init+0x2e8>)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f47f ae9d 	bne.w	8000c8c <HAL_GPIO_Init+0x10>
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	48000800 	.word	0x48000800
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48001000 	.word	0x48001000
 8000f78:	48001400 	.word	0x48001400
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d141      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d131      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe4:	4a41      	ldr	r2, [pc, #260]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2232      	movs	r2, #50	; 0x32
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001002:	e002      	b.n	800100a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3b01      	subs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001016:	d102      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f2      	bne.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102a:	d158      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e057      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001040:	e04d      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001048:	d141      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d131      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001070:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2232      	movs	r2, #50	; 0x32
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108e:	e002      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d102      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f2      	bne.n	8001090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b6:	d112      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e011      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010cc:	e007      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40007000 	.word	0x40007000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6093      	str	r3, [r2, #8]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40007000 	.word	0x40007000

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e308      	b.n	800173c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001136:	4ba3      	ldr	r3, [pc, #652]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001140:	4ba0      	ldr	r3, [pc, #640]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d102      	bne.n	8001156 <HAL_RCC_OscConfig+0x3e>
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d002      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e2e3      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b91      	ldr	r3, [pc, #580]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a90      	ldr	r2, [pc, #576]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b8b      	ldr	r3, [pc, #556]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a8a      	ldr	r2, [pc, #552]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a87      	ldr	r2, [pc, #540]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b84      	ldr	r3, [pc, #528]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a83      	ldr	r2, [pc, #524]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fab4 	bl	800073c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fab0 	bl	800073c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e2a8      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff faa0 	bl	800073c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fa9c 	bl	800073c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e294      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x136>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x13c>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d11f      	bne.n	8001294 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001254:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x154>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e267      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126c:	4b55      	ldr	r3, [pc, #340]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	061b      	lsls	r3, r3, #24
 800127a:	4952      	ldr	r1, [pc, #328]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001280:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_RCC_OscConfig+0x2b0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fa0d 	bl	80006a4 <HAL_InitTick>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d043      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e253      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d023      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa48 	bl	800073c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fa44 	bl	800073c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e23c      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	4939      	ldr	r1, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e01a      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a36      	ldr	r2, [pc, #216]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fa24 	bl	800073c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fa20 	bl	800073c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e218      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1e0>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d03c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01c      	beq.n	8001368 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff f9fd 	bl	800073c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff f9f9 	bl	800073c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1f1      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0ef      	beq.n	8001346 <HAL_RCC_OscConfig+0x22e>
 8001366:	e01b      	b.n	80013a0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff f9e0 	bl	800073c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff f9dc 	bl	800073c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1d4      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ef      	bne.n	8001380 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80ab 	beq.w	8001504 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x2b4>
 80013be:	2301      	movs	r3, #1
 80013c0:	e005      	b.n	80013ce <HAL_RCC_OscConfig+0x2b6>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	20000004 	.word	0x20000004
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00d      	beq.n	80013ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4baf      	ldr	r3, [pc, #700]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	4aae      	ldr	r2, [pc, #696]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
 80013de:	4bac      	ldr	r3, [pc, #688]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ee:	4ba9      	ldr	r3, [pc, #676]	; (8001694 <HAL_RCC_OscConfig+0x57c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013fa:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <HAL_RCC_OscConfig+0x57c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4aa5      	ldr	r2, [pc, #660]	; (8001694 <HAL_RCC_OscConfig+0x57c>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff f999 	bl	800073c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff f995 	bl	800073c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e18d      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	4b9c      	ldr	r3, [pc, #624]	; (8001694 <HAL_RCC_OscConfig+0x57c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_RCC_OscConfig+0x32e>
 8001434:	4b96      	ldr	r3, [pc, #600]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143a:	4a95      	ldr	r2, [pc, #596]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001444:	e024      	b.n	8001490 <HAL_RCC_OscConfig+0x378>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d110      	bne.n	8001470 <HAL_RCC_OscConfig+0x358>
 800144e:	4b90      	ldr	r3, [pc, #576]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	4a8e      	ldr	r2, [pc, #568]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145e:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001464:	4a8a      	ldr	r2, [pc, #552]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x378>
 8001470:	4b87      	ldr	r3, [pc, #540]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001476:	4a86      	ldr	r2, [pc, #536]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001480:	4b83      	ldr	r3, [pc, #524]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	4a82      	ldr	r2, [pc, #520]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d016      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff f950 	bl	800073c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff f94c 	bl	800073c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e142      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b6:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ed      	beq.n	80014a0 <HAL_RCC_OscConfig+0x388>
 80014c4:	e015      	b.n	80014f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff f939 	bl	800073c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f935 	bl	800073c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e12b      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e4:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80014e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ed      	bne.n	80014ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	4a64      	ldr	r2, [pc, #400]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	2b00      	cmp	r3, #0
 800150e:	d03c      	beq.n	800158a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01c      	beq.n	8001552 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800151a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800151e:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff f908 	bl	800073c <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001530:	f7ff f904 	bl	800073c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e0fc      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ef      	beq.n	8001530 <HAL_RCC_OscConfig+0x418>
 8001550:	e01b      	b.n	800158a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001552:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff f8eb 	bl	800073c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800156a:	f7ff f8e7 	bl	800073c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0df      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800157c:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800157e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ef      	bne.n	800156a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80d3 	beq.w	800173a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001594:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f000 808d 	beq.w	80016bc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d15a      	bne.n	8001660 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff f8c1 	bl	800073c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff f8bd 	bl	800073c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0b5      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x580>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6a11      	ldr	r1, [r2, #32]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ec:	3a01      	subs	r2, #1
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	4311      	orrs	r1, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015f6:	0212      	lsls	r2, r2, #8
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015fe:	0852      	lsrs	r2, r2, #1
 8001600:	3a01      	subs	r2, #1
 8001602:	0552      	lsls	r2, r2, #21
 8001604:	4311      	orrs	r1, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800160a:	0852      	lsrs	r2, r2, #1
 800160c:	3a01      	subs	r2, #1
 800160e:	0652      	lsls	r2, r2, #25
 8001610:	4311      	orrs	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001616:	06d2      	lsls	r2, r2, #27
 8001618:	430a      	orrs	r2, r1
 800161a:	491d      	ldr	r1, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff f880 	bl	800073c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f87c 	bl	800073c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e074      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x528>
 800165e:	e06c      	b.n	800173a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800166a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 8001672:	f023 0303 	bic.w	r3, r3, #3
 8001676:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_RCC_OscConfig+0x578>)
 800167e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001686:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff f858 	bl	800073c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	e00e      	b.n	80016ae <HAL_RCC_OscConfig+0x596>
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f84e 	bl	800073c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e046      	b.n	800173c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_RCC_OscConfig+0x62c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x584>
 80016ba:	e03e      	b.n	800173a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e039      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_OscConfig+0x62c>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d12c      	bne.n	8001736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	3b01      	subs	r3, #1
 80016e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d123      	bne.n	8001736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d11b      	bne.n	8001736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d113      	bne.n	8001736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d109      	bne.n	8001736 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	085b      	lsrs	r3, r3, #1
 800172e:	3b01      	subs	r3, #1
 8001730:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e11e      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b91      	ldr	r3, [pc, #580]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d910      	bls.n	8001790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 020f 	bic.w	r2, r3, #15
 8001776:	498c      	ldr	r1, [pc, #560]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b8a      	ldr	r3, [pc, #552]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e106      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d073      	beq.n	8001884 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d129      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0f4      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017b4:	f000 f966 	bl	8001a84 <RCC_GetSysClockFreqFromPLLSource>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4a7c      	ldr	r2, [pc, #496]	; (80019b0 <HAL_RCC_ClockConfig+0x268>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d93f      	bls.n	8001842 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017c2:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d033      	beq.n	8001842 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d12f      	bne.n	8001842 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ea:	4a70      	ldr	r2, [pc, #448]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e024      	b.n	8001842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0c6      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0be      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001820:	f000 f8ce 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4a61      	ldr	r2, [pc, #388]	; (80019b0 <HAL_RCC_ClockConfig+0x268>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d909      	bls.n	8001842 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001836:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b5a      	ldr	r3, [pc, #360]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4957      	ldr	r1, [pc, #348]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7fe ff72 	bl	800073c <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7fe ff6e 	bl	800073c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e095      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a42      	ldr	r2, [pc, #264]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018b4:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018bc:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4936      	ldr	r1, [pc, #216]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
 80018d6:	e008      	b.n	80018ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b80      	cmp	r3, #128	; 0x80
 80018dc:	d105      	bne.n	80018ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018de:	4b33      	ldr	r3, [pc, #204]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 80018e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d21d      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 020f 	bic.w	r2, r3, #15
 8001900:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001908:	f7fe ff18 	bl	800073c <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7fe ff14 	bl	800073c <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e03b      	b.n	800199e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_ClockConfig+0x260>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	429a      	cmp	r2, r3
 8001932:	d1ed      	bne.n	8001910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4917      	ldr	r1, [pc, #92]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490f      	ldr	r1, [pc, #60]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001972:	f000 f825 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_RCC_ClockConfig+0x264>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490c      	ldr	r1, [pc, #48]	; (80019b4 <HAL_RCC_ClockConfig+0x26c>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x270>)
 8001990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_RCC_ClockConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fe84 	bl	80006a4 <HAL_InitTick>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000
 80019ac:	40021000 	.word	0x40021000
 80019b0:	04c4b400 	.word	0x04c4b400
 80019b4:	080020b8 	.word	0x080020b8
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d102      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e047      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e03e      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d136      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1e:	68d2      	ldr	r2, [r2, #12]
 8001a20:	0a12      	lsrs	r2, r2, #8
 8001a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
      break;
 8001a2c:	e00c      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	0a12      	lsrs	r2, r2, #8
 8001a3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
      break;
 8001a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0e5b      	lsrs	r3, r3, #25
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e001      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a68:	693b      	ldr	r3, [r7, #16]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10c      	bne.n	8001ac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ab2:	68d2      	ldr	r2, [r2, #12]
 8001ab4:	0a12      	lsrs	r2, r2, #8
 8001ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
    break;
 8001ac0:	e00c      	b.n	8001adc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	0a12      	lsrs	r2, r2, #8
 8001ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
    break;
 8001ada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0e5b      	lsrs	r3, r3, #25
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	00f42400 	.word	0x00f42400

08001b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b18:	2300      	movs	r3, #0
 8001b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8098 	beq.w	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10d      	bne.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b66:	f7fe fde9 	bl	800073c <HAL_GetTick>
 8001b6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe fde5 	bl	800073c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d902      	bls.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8001b80:	e005      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ef      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d159      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01e      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d019      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bdc:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d016      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7fe fda5 	bl	800073c <HAL_GetTick>
 8001bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7fe fda1 	bl	800073c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d902      	bls.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8001c0c:	e006      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ec      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001c1c:	7cfb      	ldrb	r3, [r7, #19]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c38:	e008      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	74bb      	strb	r3, [r7, #18]
 8001c3e:	e005      	b.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4c:	7c7b      	ldrb	r3, [r7, #17]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4ba6      	ldr	r3, [pc, #664]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	4aa5      	ldr	r2, [pc, #660]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c6a:	4ba0      	ldr	r3, [pc, #640]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c70:	f023 0203 	bic.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	499c      	ldr	r1, [pc, #624]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00a      	beq.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c8c:	4b97      	ldr	r3, [pc, #604]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	f023 020c 	bic.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4994      	ldr	r1, [pc, #592]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cae:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	498b      	ldr	r1, [pc, #556]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00a      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cd0:	4b86      	ldr	r3, [pc, #536]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	4983      	ldr	r1, [pc, #524]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	497a      	ldr	r1, [pc, #488]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00a      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d14:	4b75      	ldr	r3, [pc, #468]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	4972      	ldr	r1, [pc, #456]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d36:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4969      	ldr	r1, [pc, #420]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d58:	4b64      	ldr	r3, [pc, #400]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4961      	ldr	r1, [pc, #388]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	4958      	ldr	r1, [pc, #352]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4950      	ldr	r1, [pc, #320]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dd4:	4b45      	ldr	r3, [pc, #276]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	4942      	ldr	r1, [pc, #264]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df2:	d105      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e0c:	4b37      	ldr	r3, [pc, #220]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4934      	ldr	r1, [pc, #208]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e52:	4926      	ldr	r1, [pc, #152]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e62:	d105      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	4918      	ldr	r1, [pc, #96]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed2:	d105      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e09d      	b.n	800203e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f12:	d009      	beq.n	8001f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe faca 	bl	80004dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f68:	d902      	bls.n	8001f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e002      	b.n	8001f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001f7e:	d007      	beq.n	8001f90 <HAL_SPI_Init+0xa0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f88:	d002      	beq.n	8001f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	f003 0204 	and.w	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800200c:	ea42 0103 	orr.w	r1, r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <__libc_init_array>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	4d0d      	ldr	r5, [pc, #52]	; (8002080 <__libc_init_array+0x38>)
 800204c:	4c0d      	ldr	r4, [pc, #52]	; (8002084 <__libc_init_array+0x3c>)
 800204e:	1b64      	subs	r4, r4, r5
 8002050:	10a4      	asrs	r4, r4, #2
 8002052:	2600      	movs	r6, #0
 8002054:	42a6      	cmp	r6, r4
 8002056:	d109      	bne.n	800206c <__libc_init_array+0x24>
 8002058:	4d0b      	ldr	r5, [pc, #44]	; (8002088 <__libc_init_array+0x40>)
 800205a:	4c0c      	ldr	r4, [pc, #48]	; (800208c <__libc_init_array+0x44>)
 800205c:	f000 f820 	bl	80020a0 <_init>
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	2600      	movs	r6, #0
 8002066:	42a6      	cmp	r6, r4
 8002068:	d105      	bne.n	8002076 <__libc_init_array+0x2e>
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002070:	4798      	blx	r3
 8002072:	3601      	adds	r6, #1
 8002074:	e7ee      	b.n	8002054 <__libc_init_array+0xc>
 8002076:	f855 3b04 	ldr.w	r3, [r5], #4
 800207a:	4798      	blx	r3
 800207c:	3601      	adds	r6, #1
 800207e:	e7f2      	b.n	8002066 <__libc_init_array+0x1e>
 8002080:	080020c8 	.word	0x080020c8
 8002084:	080020c8 	.word	0x080020c8
 8002088:	080020c8 	.word	0x080020c8
 800208c:	080020cc 	.word	0x080020cc

08002090 <memset>:
 8002090:	4402      	add	r2, r0
 8002092:	4603      	mov	r3, r0
 8002094:	4293      	cmp	r3, r2
 8002096:	d100      	bne.n	800209a <memset+0xa>
 8002098:	4770      	bx	lr
 800209a:	f803 1b01 	strb.w	r1, [r3], #1
 800209e:	e7f9      	b.n	8002094 <memset+0x4>

080020a0 <_init>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr

080020ac <_fini>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	bf00      	nop
 80020b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b2:	bc08      	pop	{r3}
 80020b4:	469e      	mov	lr, r3
 80020b6:	4770      	bx	lr
