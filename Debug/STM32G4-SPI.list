
STM32G4-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009300  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009538  08009538  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009538  08009538  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009538  08009538  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012cc  20000184  080096c4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001450  080096c4  00021450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee87  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004190  00000000  00000000  0003f03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000431d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  000444d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024261  00000000  00000000  000455e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186c8  00000000  00000000  00069849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b48  00000000  00000000  00081f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b98  00000000  00000000  00154aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080094c0 	.word	0x080094c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080094c0 	.word	0x080094c0

08000218 <SPI_WriteByte>:

#define  SPI_CS_LOW       HAL_GPIO_WritePin( CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_RESET);
#define  SPI_CS_HIGH      HAL_GPIO_WritePin( CS_1_GPIO_Port, CS_1_Pin, GPIO_PIN_SET);

void SPI_WriteByte(uint8_t b)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit( &hspi1, &(b), 1, HAL_MAX_DELAY);
 8000222:	1df9      	adds	r1, r7, #7
 8000224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000228:	2201      	movs	r2, #1
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <SPI_WriteByte+0x20>)
 800022c:	f003 ff09 	bl	8004042 <HAL_SPI_Transmit>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000454 	.word	0x20000454

0800023c <SPI_ReadByte>:

uint8_t SPI_ReadByte()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	uint8_t b;
	HAL_SPI_Receive( &hspi1, &(b), 1, HAL_MAX_DELAY);
 8000242:	1df9      	adds	r1, r7, #7
 8000244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000248:	2201      	movs	r2, #1
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <SPI_ReadByte+0x20>)
 800024c:	f004 f867 	bl	800431e <HAL_SPI_Receive>
	return b;
 8000250:	79fb      	ldrb	r3, [r7, #7]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000454 	.word	0x20000454

08000260 <maxim_31856_write_register>:
}

uint8_t uch_cr0,uch_cr1,uch_mask;

void maxim_31856_write_register(uint8_t uch_register_address, uint8_t uch_register_value)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	460a      	mov	r2, r1
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	4613      	mov	r3, r2
 800026e:	71bb      	strb	r3, [r7, #6]
  SPI_CS_LOW;
 8000270:	2200      	movs	r2, #0
 8000272:	2101      	movs	r1, #1
 8000274:	4809      	ldr	r0, [pc, #36]	; (800029c <maxim_31856_write_register+0x3c>)
 8000276:	f001 f87b 	bl	8001370 <HAL_GPIO_WritePin>
  SPI_WriteByte(uch_register_address);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ffcb 	bl	8000218 <SPI_WriteByte>
  SPI_WriteByte(uch_register_value);
 8000282:	79bb      	ldrb	r3, [r7, #6]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffc7 	bl	8000218 <SPI_WriteByte>
  SPI_CS_HIGH; 
 800028a:	2201      	movs	r2, #1
 800028c:	2101      	movs	r1, #1
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <maxim_31856_write_register+0x3c>)
 8000290:	f001 f86e 	bl	8001370 <HAL_GPIO_WritePin>
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48000400 	.word	0x48000400

080002a0 <maxim_31856_read_register>:

uint8_t maxim_31856_read_register(uint8_t uch_register_address)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  uint8_t uch_register_data;
  
  SPI_CS_LOW;
 80002aa:	2200      	movs	r2, #0
 80002ac:	2101      	movs	r1, #1
 80002ae:	480a      	ldr	r0, [pc, #40]	; (80002d8 <maxim_31856_read_register+0x38>)
 80002b0:	f001 f85e 	bl	8001370 <HAL_GPIO_WritePin>
  SPI_WriteByte(uch_register_address);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f7ff ffae 	bl	8000218 <SPI_WriteByte>
  uch_register_data=SPI_ReadByte();
 80002bc:	f7ff ffbe 	bl	800023c <SPI_ReadByte>
 80002c0:	4603      	mov	r3, r0
 80002c2:	73fb      	strb	r3, [r7, #15]
  SPI_CS_HIGH;
 80002c4:	2201      	movs	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <maxim_31856_read_register+0x38>)
 80002ca:	f001 f851 	bl	8001370 <HAL_GPIO_WritePin>
  return (uch_register_data);
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	48000400 	.word	0x48000400

080002dc <maxim_31856_init>:
 SPI_Read(uch_buff,uch_nBytes);
 SPI_CS_HIGH;
}

void maxim_31856_init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
   //Enable fault detection, select 50Hz filtering, use interrupt mode as fault mode
   uch_cr0 = OC_Fault_Enable_1|NRF_50Hz| Interrupt_Mode; //Configure CR0
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <maxim_31856_init+0x9c>)
 80002e2:	2215      	movs	r2, #21
 80002e4:	701a      	strb	r2, [r3, #0]
   //Because the single measurement mode is adopted, the output result of each measurement is set. Thermocouple selection K-type thermocouple
   uch_cr1&= Average_1_Bit;
 80002e6:	4b25      	ldr	r3, [pc, #148]	; (800037c <maxim_31856_init+0xa0>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <maxim_31856_init+0xa0>)
 80002f2:	701a      	strb	r2, [r3, #0]
   uch_cr1|=TC_TypeK;
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <maxim_31856_init+0xa0>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	f043 0303 	orr.w	r3, r3, #3
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b1f      	ldr	r3, [pc, #124]	; (800037c <maxim_31856_init+0xa0>)
 8000300:	701a      	strb	r2, [r3, #0]
   //Because the fault detection is enabled, no fault detection is shielded, and the faults that do not need to be detected can be shielded according to the requirements
   uch_mask=No_Fault_Mask;
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <maxim_31856_init+0xa4>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
   
   maxim_31856_write_register(0x80, uch_cr0); //Set CR0
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <maxim_31856_init+0x9c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	2080      	movs	r0, #128	; 0x80
 8000310:	f7ff ffa6 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x81, uch_cr1); //Set CR1
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <maxim_31856_init+0xa0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4619      	mov	r1, r3
 800031a:	2081      	movs	r0, #129	; 0x81
 800031c:	f7ff ffa0 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x82,uch_mask); //Set MASK
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <maxim_31856_init+0xa4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4619      	mov	r1, r3
 8000326:	2082      	movs	r0, #130	; 0x82
 8000328:	f7ff ff9a 	bl	8000260 <maxim_31856_write_register>
   
   //Write the cold junction fault threshold register, which can be set as required
   maxim_31856_write_register(0x83,0x7F);
 800032c:	217f      	movs	r1, #127	; 0x7f
 800032e:	2083      	movs	r0, #131	; 0x83
 8000330:	f7ff ff96 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x84,0xC0);
 8000334:	21c0      	movs	r1, #192	; 0xc0
 8000336:	2084      	movs	r0, #132	; 0x84
 8000338:	f7ff ff92 	bl	8000260 <maxim_31856_write_register>
   //Write the thermocouple fault threshold register, which can be set as required
   maxim_31856_write_register(0x85,0x7F);
 800033c:	217f      	movs	r1, #127	; 0x7f
 800033e:	2085      	movs	r0, #133	; 0x85
 8000340:	f7ff ff8e 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x86,0xFF);
 8000344:	21ff      	movs	r1, #255	; 0xff
 8000346:	2086      	movs	r0, #134	; 0x86
 8000348:	f7ff ff8a 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x87,0x80);
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	2087      	movs	r0, #135	; 0x87
 8000350:	f7ff ff86 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x88,0x00);
 8000354:	2100      	movs	r1, #0
 8000356:	2088      	movs	r0, #136	; 0x88
 8000358:	f7ff ff82 	bl	8000260 <maxim_31856_write_register>
   //Write the cold junction temperature offset register, which can be set as required
   maxim_31856_write_register(0x89,0x00);
 800035c:	2100      	movs	r1, #0
 800035e:	2089      	movs	r0, #137	; 0x89
 8000360:	f7ff ff7e 	bl	8000260 <maxim_31856_write_register>
   //If it is forbidden to use the internal cold junction compensation of the device, write the cold junction temperature register, which can be set as required
   //If the external cold junction temperature sensor is used to measure the cold junction temperature, it needs to be updated every time the cold junction temperature is measured
   //The cold junction temperature register.
   maxim_31856_write_register(0x8A,0x00);
 8000364:	2100      	movs	r1, #0
 8000366:	208a      	movs	r0, #138	; 0x8a
 8000368:	f7ff ff7a 	bl	8000260 <maxim_31856_write_register>
   maxim_31856_write_register(0x8B,0x00);
 800036c:	2100      	movs	r1, #0
 800036e:	208b      	movs	r0, #139	; 0x8b
 8000370:	f7ff ff76 	bl	8000260 <maxim_31856_write_register>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	200003c6 	.word	0x200003c6
 800037c:	200003c4 	.word	0x200003c4
 8000380:	200003c5 	.word	0x200003c5

08000384 <maxim_start_conversion>:

 the define of One_Shot_ Conversion or Automatic_Conversion
 please see MAX31856drv.h
*****************************************************/
void maxim_start_conversion(uint8_t uch_conversion_mode)  
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
 uch_cr0=maxim_31856_read_register(0x00);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff86 	bl	80002a0 <maxim_31856_read_register>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <maxim_start_conversion+0x48>)
 800039a:	701a      	strb	r2, [r3, #0]
 uch_cr0&=Stop_Conversion_Bit;
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <maxim_start_conversion+0x48>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <maxim_start_conversion+0x48>)
 80003a8:	701a      	strb	r2, [r3, #0]
 uch_cr0|=uch_conversion_mode;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <maxim_start_conversion+0x48>)
 80003ac:	781a      	ldrb	r2, [r3, #0]
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <maxim_start_conversion+0x48>)
 80003b6:	701a      	strb	r2, [r3, #0]
 maxim_31856_write_register(0x80, uch_cr0);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <maxim_start_conversion+0x48>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	2080      	movs	r0, #128	; 0x80
 80003c0:	f7ff ff4e 	bl	8000260 <maxim_31856_write_register>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	200003c6 	.word	0x200003c6

080003d0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003d6:	4a20      	ldr	r2, [pc, #128]	; (8000458 <MX_FDCAN1_Init+0x88>)
 80003d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_FDCAN1_Init+0x84>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000400:	2201      	movs	r2, #1
 8000402:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000406:	2201      	movs	r2, #1
 8000408:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800040c:	2202      	movs	r2, #2
 800040e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000412:	2202      	movs	r2, #2
 8000414:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000418:	2201      	movs	r2, #1
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800041e:	2201      	movs	r2, #1
 8000420:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000424:	2201      	movs	r2, #1
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800042a:	2201      	movs	r2, #1
 800042c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000430:	2200      	movs	r2, #0
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000436:	2200      	movs	r2, #0
 8000438:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_FDCAN1_Init+0x84>)
 800043c:	2200      	movs	r2, #0
 800043e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_FDCAN1_Init+0x84>)
 8000442:	f000 fc4d 	bl	8000ce0 <HAL_FDCAN_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800044c:	f000 f944 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200003c8 	.word	0x200003c8
 8000458:	40006400 	.word	0x40006400

0800045c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <HAL_FDCAN_MspInit+0x7c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d128      	bne.n	80004d0 <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 8000480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 8000484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000488:	6593      	str	r3, [r2, #88]	; 0x58
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800048e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a10      	ldr	r2, [pc, #64]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 800049c:	f043 0302 	orr.w	r3, r3, #2
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_FDCAN_MspInit+0x80>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0302 	and.w	r3, r3, #2
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004c0:	2309      	movs	r3, #9
 80004c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <HAL_FDCAN_MspInit+0x84>)
 80004cc:	f000 fdce 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80004d0:	bf00      	nop
 80004d2:	3728      	adds	r7, #40	; 0x28
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40006400 	.word	0x40006400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	48000400 	.word	0x48000400

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_GPIO_Init+0xa8>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <MX_GPIO_Init+0xa8>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0xa8>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xa8>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a1d      	ldr	r2, [pc, #116]	; (800058c <MX_GPIO_Init+0xa8>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_GPIO_Init+0xa8>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_GPIO_Init+0xa8>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a17      	ldr	r2, [pc, #92]	; (800058c <MX_GPIO_Init+0xa8>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <MX_GPIO_Init+0xa8>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2107      	movs	r1, #7
 8000546:	4812      	ldr	r0, [pc, #72]	; (8000590 <MX_GPIO_Init+0xac>)
 8000548:	f000 ff12 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin;
 800054c:	2307      	movs	r3, #7
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4619      	mov	r1, r3
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <MX_GPIO_Init+0xac>)
 8000564:	f000 fd82 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_4_Pin;
 8000568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_4_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0xac>)
 800057e:	f000 fd75 	bl	800106c <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	48000400 	.word	0x48000400

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 f9ff 	bl	800099a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f81e 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff ffa0 	bl	80004e4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005a4:	f7ff ff14 	bl	80003d0 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80005a8:	f000 f8e4 	bl	8000774 <MX_SPI1_Init>
  MX_USB_Device_Init();
 80005ac:	f008 fa66 	bl	8008a7c <MX_USB_Device_Init>
  MX_RTC_Init();
 80005b0:	f000 f898 	bl	80006e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  maxim_31856_init();
 80005b4:	f7ff fe92 	bl	80002dc <maxim_31856_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  maxim_start_conversion( One_Shot_Conversion );
 80005b8:	2040      	movs	r0, #64	; 0x40
 80005ba:	f7ff fee3 	bl	8000384 <maxim_start_conversion>
	  HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c2:	f000 fa5b 	bl	8000a7c <HAL_Delay>
	  maxim_31856_read_register( 1 );
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fe6a 	bl	80002a0 <maxim_31856_read_register>
	  CDC_Transmit_FS( (uint8_t*)"Debug", 8);
 80005cc:	2108      	movs	r1, #8
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <main+0x44>)
 80005d0:	f008 fb12 	bl	8008bf8 <CDC_Transmit_FS>
	  maxim_start_conversion( One_Shot_Conversion );
 80005d4:	e7f0      	b.n	80005b8 <main+0x24>
 80005d6:	bf00      	nop
 80005d8:	080094d8 	.word	0x080094d8

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0a8      	sub	sp, #160	; 0xa0
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005e6:	2238      	movs	r2, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 ff60 	bl	80094b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2254      	movs	r2, #84	; 0x54
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f008 ff52 	bl	80094b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000610:	f002 fb6a 	bl	8002ce8 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f002 fb58 	bl	8002cc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <SystemClock_Config+0xf8>)
 800061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061e:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <SystemClock_Config+0xf8>)
 8000620:	f023 0318 	bic.w	r3, r3, #24
 8000624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000628:	2306      	movs	r3, #6
 800062a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000634:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2340      	movs	r3, #64	; 0x40
 8000638:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000646:	2301      	movs	r3, #1
 8000648:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800064c:	230c      	movs	r3, #12
 800064e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000658:	2304      	movs	r3, #4
 800065a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fbf1 	bl	8002e50 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f830 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fef4 	bl	8003480 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800069e:	f000 f81b 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
 80006a2:	f44f 2303 	mov.w	r3, #536576	; 0x83000
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80006ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f8c3 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006c8:	f000 f806 	bl	80006d8 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	37a0      	adds	r7, #160	; 0xa0
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_RTC_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_RTC_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_RTC_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_RTC_Init+0x50>)
 80006f6:	227f      	movs	r2, #127	; 0x7f
 80006f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_RTC_Init+0x50>)
 80006fc:	22ff      	movs	r2, #255	; 0xff
 80006fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_RTC_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_RTC_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_RTC_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_RTC_Init+0x50>)
 8000714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000718:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_RTC_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_RTC_Init+0x50>)
 8000722:	f003 fadd 	bl	8003ce0 <HAL_RTC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800072c:	f7ff ffd4 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000042c 	.word	0x2000042c
 8000738:	40002800 	.word	0x40002800

0800073c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_RTC_MspInit+0x30>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d107      	bne.n	800075e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_RTC_MspInit+0x34>)
 8000750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_RTC_MspInit+0x34>)
 8000756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800075a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40002800 	.word	0x40002800
 8000770:	40021000 	.word	0x40021000

08000774 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_SPI1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_SPI1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI1_Init+0x74>)
 800078e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000792:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007c2:	2207      	movs	r2, #7
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007ce:	2208      	movs	r2, #8
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_SPI1_Init+0x74>)
 80007d4:	f003 fb8a 	bl	8003eec <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f7ff ff7b 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000454 	.word	0x20000454
 80007ec:	40013000 	.word	0x40013000

080007f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_SPI_MspInit+0x7c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d128      	bne.n	8000864 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_SPI_MspInit+0x80>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <HAL_SPI_MspInit+0x80>)
 8000818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_SPI_MspInit+0x80>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_SPI_MspInit+0x80>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <HAL_SPI_MspInit+0x80>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_SPI_MspInit+0x80>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23e0      	movs	r3, #224	; 0xe0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000852:	2305      	movs	r3, #5
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fc04 	bl	800106c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40013000 	.word	0x40013000
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x44>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6613      	str	r3, [r2, #96]	; 0x60
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x44>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008aa:	f002 fac1 	bl	8002e30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f89a 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USB_LP_IRQHandler+0x10>)
 8000916:	f000 fe4a 	bl	80015ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000115c 	.word	0x2000115c

08000924 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000972:	f7ff ffd7 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f008 fd77 	bl	8009468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097a:	f7ff fe0b 	bl	8000594 <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   r0, =_estack
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800098c:	08009540 	.word	0x08009540
  ldr r2, =_sbss
 8000990:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000994:	20001450 	.word	0x20001450

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>

0800099a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f95b 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f80e 	bl	80009cc <HAL_InitTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	e001      	b.n	80009c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009bc:	f7ff ff5a 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c0:	79fb      	ldrb	r3, [r7, #7]

}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_InitTick+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d022      	beq.n	8000a26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_InitTick+0x6c>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_InitTick+0x68>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f966 	bl	8000cc6 <HAL_SYSTICK_Config>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10f      	bne.n	8000a20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d809      	bhi.n	8000a1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a06:	2200      	movs	r2, #0
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a0e:	f000 f932 	bl	8000c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_InitTick+0x70>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e007      	b.n	8000a2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e004      	b.n	8000a2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	e001      	b.n	8000a2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	200004b8 	.word	0x200004b8
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200004b8 	.word	0x200004b8

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a94:	d004      	beq.n	8000aa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_Delay+0x40>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa0:	bf00      	nop
 8000aa2:	f7ff ffdf 	bl	8000a64 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d8f7      	bhi.n	8000aa2 <HAL_Delay+0x26>
  {
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff29 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff40 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff90 	bl	8000bb4 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5f 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff33 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa4 	bl	8000c1c <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e147      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fba8 	bl	800045c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0210 	bic.w	r2, r2, #16
 8000d1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1c:	f7ff fea2 	bl	8000a64 <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d22:	e012      	b.n	8000d4a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d24:	f7ff fe9e 	bl	8000a64 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b0a      	cmp	r3, #10
 8000d30:	d90b      	bls.n	8000d4a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e11b      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d0e5      	beq.n	8000d24 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d68:	f7ff fe7c 	bl	8000a64 <HAL_GetTick>
 8000d6c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d6e:	e012      	b.n	8000d96 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d70:	f7ff fe78 	bl	8000a64 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	d90b      	bls.n	8000d96 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0f5      	b.n	8000f82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0e5      	beq.n	8000d70 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <HAL_FDCAN_Init+0x2ac>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d103      	bne.n	8000dc6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000dbe:	4a74      	ldr	r2, [pc, #464]	; (8000f90 <HAL_FDCAN_Init+0x2b0>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1b      	ldrb	r3, [r3, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d108      	bne.n	8000de0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ddc:	619a      	str	r2, [r3, #24]
 8000dde:	e007      	b.n	8000df0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7c5b      	ldrb	r3, [r3, #17]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	e007      	b.n	8000e1a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e18:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7c9b      	ldrb	r3, [r3, #18]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e30:	619a      	str	r2, [r3, #24]
 8000e32:	e007      	b.n	8000e44 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	699a      	ldr	r2, [r3, #24]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e42:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000e68:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0210 	bic.w	r2, r2, #16
 8000e78:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	699a      	ldr	r2, [r3, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	619a      	str	r2, [r3, #24]
 8000e92:	e02c      	b.n	8000eee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d028      	beq.n	8000eee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d01c      	beq.n	8000ede <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eb2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0210 	orr.w	r2, r2, #16
 8000ec2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d110      	bne.n	8000eee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	e007      	b.n	8000eee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0220 	orr.w	r2, r2, #32
 8000eec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000efe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f22:	d115      	bne.n	8000f50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	3b01      	subs	r3, #1
 8000f46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f814 	bl	8000f94 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	40006500 	.word	0x40006500

08000f94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8000f9e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d103      	bne.n	8000fb2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000fb0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a2c      	ldr	r2, [pc, #176]	; (8001068 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d103      	bne.n	8000fc4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8000fc2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ff8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	061a      	lsls	r2, r3, #24
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e005      	b.n	8001046 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3304      	adds	r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	429a      	cmp	r2, r3
 8001050:	d3f3      	bcc.n	800103a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	4000a400 	.word	0x4000a400
 8001064:	40006800 	.word	0x40006800
 8001068:	40006c00 	.word	0x40006c00

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800107a:	e15a      	b.n	8001332 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 814c 	beq.w	800132c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d00b      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d007      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b12      	cmp	r3, #18
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	f003 0201 	and.w	r2, r3, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0xea>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	6939      	ldr	r1, [r7, #16]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80a6 	beq.w	800132c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_GPIO_Init+0x2e4>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e4:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_GPIO_Init+0x2e4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6613      	str	r3, [r2, #96]	; 0x60
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_GPIO_Init+0x2e4>)
 80011ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f8:	4a56      	ldr	r2, [pc, #344]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001222:	d01f      	beq.n	8001264 <HAL_GPIO_Init+0x1f8>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x2ec>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d019      	beq.n	8001260 <HAL_GPIO_Init+0x1f4>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_GPIO_Init+0x2f0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x1f0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x2f4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1ec>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a49      	ldr	r2, [pc, #292]	; (8001364 <HAL_GPIO_Init+0x2f8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1e8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_GPIO_Init+0x2fc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1e4>
 800124c:	2305      	movs	r3, #5
 800124e:	e00a      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 8001250:	2306      	movs	r3, #6
 8001252:	e008      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 8001254:	2304      	movs	r3, #4
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 8001258:	2303      	movs	r3, #3
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1fa>
 8001264:	2300      	movs	r3, #0
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001276:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x2e8>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001284:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_GPIO_Init+0x300>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a8:	4a30      	ldr	r2, [pc, #192]	; (800136c <HAL_GPIO_Init+0x300>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_GPIO_Init+0x300>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_GPIO_Init+0x300>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_GPIO_Init+0x300>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <HAL_GPIO_Init+0x300>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_GPIO_Init+0x300>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_GPIO_Init+0x300>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f47f ae9d 	bne.w	800107c <HAL_GPIO_Init+0x10>
  }
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800
 8001360:	48000c00 	.word	0x48000c00
 8001364:	48001000 	.word	0x48001000
 8001368:	48001400 	.word	0x48001400
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e002      	b.n	8001394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b08b      	sub	sp, #44	; 0x2c
 80013a4:	af06      	add	r7, sp, #24
 80013a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0d7      	b.n	8001562 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f007 fd5e 	bl	8008e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fcb2 	bl	8004d42 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e04c      	b.n	800147e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	3301      	adds	r3, #1
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	b298      	uxth	r0, r3
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	3336      	adds	r3, #54	; 0x36
 8001422:	4602      	mov	r2, r0
 8001424:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3303      	adds	r3, #3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	3338      	adds	r3, #56	; 0x38
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	333c      	adds	r3, #60	; 0x3c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3340      	adds	r3, #64	; 0x40
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	3301      	adds	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	d3ad      	bcc.n	80013e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e044      	b.n	8001518 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3b5      	bcc.n	800148e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	687e      	ldr	r6, [r7, #4]
 800152a:	466d      	mov	r5, sp
 800152c:	f106 0410 	add.w	r4, r6, #16
 8001530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	602b      	str	r3, [r5, #0]
 8001538:	1d33      	adds	r3, r6, #4
 800153a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f003 fc1b 	bl	8004d78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f001 fb8a 	bl	8002c74 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800156a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_PCD_Start+0x16>
 800157c:	2302      	movs	r3, #2
 800157e:	e012      	b.n	80015a6 <HAL_PCD_Start+0x3c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fbc1 	bl	8004d14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f005 fd75 	bl	8007086 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 fd7a 	bl	80070b4 <USB_ReadInterrupts>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ca:	d102      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb4d 	bl	8001c6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f005 fd6c 	bl	80070b4 <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e6:	d112      	bne.n	800160e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f007 fcbc 	bl	8008f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001606:	2100      	movs	r1, #0
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f91e 	bl	800184a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fd4e 	bl	80070b4 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001622:	d10b      	bne.n	800163c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f005 fd37 	bl	80070b4 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001650:	d10b      	bne.n	800166a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001664:	b292      	uxth	r2, r2
 8001666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f005 fd20 	bl	80070b4 <USB_ReadInterrupts>
 8001674:	4603      	mov	r3, r0
 8001676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800167a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167e:	d133      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	b292      	uxth	r2, r2
 8001694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d107      	bne.n	80016ca <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016c2:	2100      	movs	r1, #0
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f007 fe4f 	bl	8009368 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f007 fc90 	bl	8008ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016e2:	b292      	uxth	r2, r2
 80016e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fce1 	bl	80070b4 <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fc:	d126      	bne.n	800174c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0208 	orr.w	r2, r2, #8
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f007 fc38 	bl	8008fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fcaf 	bl	80070b4 <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175c:	2b80      	cmp	r3, #128	; 0x80
 800175e:	d13f      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001772:	b292      	uxth	r2, r2
 8001774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d12b      	bne.n	80017da <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0204 	orr.w	r2, r2, #4
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0208 	orr.w	r2, r2, #8
 80017ac:	b292      	uxth	r2, r2
 80017ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017d0:	2101      	movs	r1, #1
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f007 fdc8 	bl	8009368 <HAL_PCDEx_LPM_Callback>
 80017d8:	e002      	b.n	80017e0 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f007 fbee 	bl	8008fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fc65 	bl	80070b4 <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f4:	d10e      	bne.n	8001814 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001808:	b292      	uxth	r2, r2
 800180a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f007 fba7 	bl	8008f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fc4b 	bl	80070b4 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001828:	d10b      	bne.n	8001842 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_PCD_SetAddress+0x1a>
 8001860:	2302      	movs	r3, #2
 8001862:	e013      	b.n	800188c <HAL_PCD_SetAddress+0x42>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fbee 	bl	800705e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	4608      	mov	r0, r1
 800189e:	4611      	mov	r1, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	70fb      	strb	r3, [r7, #3]
 80018a6:	460b      	mov	r3, r1
 80018a8:	803b      	strh	r3, [r7, #0]
 80018aa:	4613      	mov	r3, r2
 80018ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da0e      	bge.n	80018d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e00e      	b.n	80018f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	f003 0207 	and.w	r2, r3, #7
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001902:	883a      	ldrh	r2, [r7, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	78ba      	ldrb	r2, [r7, #2]
 800190c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001920:	78bb      	ldrb	r3, [r7, #2]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d102      	bne.n	800192c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_PCD_EP_Open+0xa6>
 8001936:	2302      	movs	r3, #2
 8001938:	e00e      	b.n	8001958 <HAL_PCD_EP_Open+0xc4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68f9      	ldr	r1, [r7, #12]
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fa37 	bl	8004dbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001956:	7afb      	ldrb	r3, [r7, #11]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800196c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001970:	2b00      	cmp	r3, #0
 8001972:	da0e      	bge.n	8001992 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	705a      	strb	r2, [r3, #1]
 8001990:	e00e      	b.n	80019b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0207 	and.w	r2, r3, #7
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_PCD_EP_Close+0x6a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e00e      	b.n	80019e8 <HAL_PCD_EP_Close+0x88>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fd5d 	bl	8005498 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	460b      	mov	r3, r1
 80019fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f003 ff10 	bl	8005872 <USB_EPStartXfer>
 8001a52:	e005      	b.n	8001a60 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6979      	ldr	r1, [r7, #20]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 ff09 	bl	8005872 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	f003 0207 	and.w	r2, r3, #7
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a8c:	681b      	ldr	r3, [r3, #0]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d106      	bne.n	8001b0a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 feb5 	bl	8005872 <USB_EPStartXfer>
 8001b08:	e005      	b.n	8001b16 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 feae 	bl	8005872 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 0207 	and.w	r2, r3, #7
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d901      	bls.n	8001b3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e03e      	b.n	8001bbc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da0e      	bge.n	8001b64 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	705a      	strb	r2, [r3, #1]
 8001b62:	e00c      	b.n	8001b7e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_PCD_EP_SetStall+0x7e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e00e      	b.n	8001bbc <HAL_PCD_EP_SetStall+0x9c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f005 f957 	bl	8006e60 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d901      	bls.n	8001be2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e040      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da0e      	bge.n	8001c08 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	705a      	strb	r2, [r3, #1]
 8001c06:	e00e      	b.n	8001c26 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_PCD_EP_ClrStall+0x82>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e00e      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0xa0>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 f954 	bl	8006f02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c74:	e2d6      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 815b 	bne.w	8001f4c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d150      	bne.n	8001d42 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3328      	adds	r3, #40	; 0x28
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	441a      	add	r2, r3
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f007 f913 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8287 	beq.w	8002224 <PCD_EP_ISR_Handler+0x5b8>
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8282 	bne.w	8002224 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d40:	e270      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d032      	beq.n	8001dc2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f005 f9de 	bl	8007158 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001da8:	4013      	ands	r3, r2
 8001daa:	823b      	strh	r3, [r7, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	8a3a      	ldrh	r2, [r7, #16]
 8001db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db6:	b292      	uxth	r2, r2
 8001db8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f007 f88a 	bl	8008ed4 <HAL_PCD_SetupStageCallback>
 8001dc0:	e230      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f280 822c 	bge.w	8002224 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dd8:	4013      	ands	r3, r2
 8001dda:	83bb      	strh	r3, [r7, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	8bba      	ldrh	r2, [r7, #28]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de6:	b292      	uxth	r2, r2
 8001de8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d019      	beq.n	8001e4e <PCD_EP_ISR_Handler+0x1e2>
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	6959      	ldr	r1, [r3, #20]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	f005 f990 	bl	8007158 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	441a      	add	r2, r3
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e46:	2100      	movs	r1, #0
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f007 f855 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 81e2 	bne.w	8002224 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4413      	add	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <PCD_EP_ISR_Handler+0x242>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	801a      	strh	r2, [r3, #0]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	e02f      	b.n	8001f0e <PCD_EP_ISR_Handler+0x2a2>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8001eb4:	d813      	bhi.n	8001ede <PCD_EP_ISR_Handler+0x272>
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <PCD_EP_ISR_Handler+0x264>
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	3301      	adds	r3, #1
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	029b      	lsls	r3, r3, #10
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	e017      	b.n	8001f0e <PCD_EP_ISR_Handler+0x2a2>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x28c>
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1e:	827b      	strh	r3, [r7, #18]
 8001f20:	8a7b      	ldrh	r3, [r7, #18]
 8001f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f26:	827b      	strh	r3, [r7, #18]
 8001f28:	8a7b      	ldrh	r3, [r7, #18]
 8001f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f2e:	827b      	strh	r3, [r7, #18]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	8a7b      	ldrh	r3, [r7, #18]
 8001f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	8013      	strh	r3, [r2, #0]
 8001f4a:	e16b      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f280 80e4 	bge.w	8002130 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f7e:	4013      	ands	r3, r2
 8001f80:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f9a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	7b1b      	ldrb	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d120      	bne.n	8001ffa <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fdc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8083 	beq.w	80020ec <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	6959      	ldr	r1, [r3, #20]
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	88da      	ldrh	r2, [r3, #6]
 8001ff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff4:	f005 f8b0 	bl	8007158 <USB_ReadPMA>
 8001ff8:	e078      	b.n	80020ec <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d108      	bne.n	8002014 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002002:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002004:	461a      	mov	r2, r3
 8002006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f919 	bl	8002240 <HAL_PCD_EP_DB_Receive>
 800200e:	4603      	mov	r3, r0
 8002010:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002012:	e06b      	b.n	80020ec <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	441a      	add	r2, r3
 800203e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002050:	b29b      	uxth	r3, r3
 8002052:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d01f      	beq.n	80020ae <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	4413      	add	r3, r2
 8002088:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002092:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002096:	2b00      	cmp	r3, #0
 8002098:	d028      	beq.n	80020ec <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	6959      	ldr	r1, [r3, #20]
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	891a      	ldrh	r2, [r3, #8]
 80020a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a8:	f005 f856 	bl	8007158 <USB_ReadPMA>
 80020ac:	e01e      	b.n	80020ec <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	6959      	ldr	r1, [r3, #20]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	895a      	ldrh	r2, [r3, #10]
 80020e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e8:	f005 f836 	bl	8007158 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f2:	441a      	add	r2, r3
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fe:	441a      	add	r2, r3
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <PCD_EP_ISR_Handler+0x4aa>
 800210c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	429a      	cmp	r2, r3
 8002114:	d206      	bcs.n	8002124 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f006 feeb 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
 8002122:	e005      	b.n	8002130 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fba1 	bl	8005872 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b00      	cmp	r3, #0
 8002138:	d074      	beq.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800213a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002168:	843b      	strh	r3, [r7, #32]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	8c3b      	ldrh	r3, [r7, #32]
 800217a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	78db      	ldrb	r3, [r3, #3]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d144      	bne.n	8002218 <PCD_EP_ISR_Handler+0x5ac>
 800218e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d13f      	bne.n	8002218 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	8bfb      	ldrh	r3, [r7, #30]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d906      	bls.n	80021d6 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	8bfb      	ldrh	r3, [r7, #30]
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	619a      	str	r2, [r3, #24]
 80021d4:	e002      	b.n	80021dc <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f006 fe9f 	bl	8008f2e <HAL_PCD_DataInStageCallback>
 80021f0:	e018      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	8bfb      	ldrh	r3, [r7, #30]
 80021f8:	441a      	add	r2, r3
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	8bfb      	ldrh	r3, [r7, #30]
 8002204:	441a      	add	r2, r3
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fb2e 	bl	8005872 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002216:	e005      	b.n	8002224 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800221a:	461a      	mov	r2, r3
 800221c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f917 	bl	8002452 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21b      	sxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f6ff ad20 	blt.w	8001c76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3738      	adds	r7, #56	; 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d07c      	beq.n	8002352 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	4413      	add	r3, r2
 8002272:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	8b7b      	ldrh	r3, [r7, #26]
 8002284:	429a      	cmp	r2, r3
 8002286:	d306      	bcc.n	8002296 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	619a      	str	r2, [r3, #24]
 8002294:	e002      	b.n	800229c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d123      	bne.n	80022ec <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	833b      	strh	r3, [r7, #24]
 80022c0:	8b3b      	ldrh	r3, [r7, #24]
 80022c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022c6:	833b      	strh	r3, [r7, #24]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	8b3b      	ldrh	r3, [r7, #24]
 80022d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01f      	beq.n	8002336 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002310:	82fb      	strh	r3, [r7, #22]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	8afb      	ldrh	r3, [r7, #22]
 8002322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002332:	b29b      	uxth	r3, r3
 8002334:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002336:	8b7b      	ldrh	r3, [r7, #26]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8085 	beq.w	8002448 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6959      	ldr	r1, [r3, #20]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	891a      	ldrh	r2, [r3, #8]
 800234a:	8b7b      	ldrh	r3, [r7, #26]
 800234c:	f004 ff04 	bl	8007158 <USB_ReadPMA>
 8002350:	e07a      	b.n	8002448 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	4413      	add	r3, r2
 800236c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002376:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	8b7b      	ldrh	r3, [r7, #26]
 800237e:	429a      	cmp	r2, r3
 8002380:	d306      	bcc.n	8002390 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	e002      	b.n	8002396 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d123      	bne.n	80023e6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	83fb      	strh	r3, [r7, #30]
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c0:	83fb      	strh	r3, [r7, #30]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	441a      	add	r2, r3
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11f      	bne.n	8002430 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	83bb      	strh	r3, [r7, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	8bbb      	ldrh	r3, [r7, #28]
 800241c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800242c:	b29b      	uxth	r3, r3
 800242e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002430:	8b7b      	ldrh	r3, [r7, #26]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	6959      	ldr	r1, [r3, #20]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	895a      	ldrh	r2, [r3, #10]
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	f004 fe88 	bl	8007158 <USB_ReadPMA>
    }
  }

  return count;
 8002448:	8b7b      	ldrh	r3, [r7, #26]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b0a2      	sub	sp, #136	; 0x88
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	4613      	mov	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 81c5 	beq.w	80027f6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4413      	add	r3, r2
 8002486:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002490:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800249c:	429a      	cmp	r2, r3
 800249e:	d907      	bls.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a8:	1ad2      	subs	r2, r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	619a      	str	r2, [r3, #24]
 80024ae:	e002      	b.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80b9 	bne.w	8002632 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d126      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0xc4>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	4413      	add	r3, r2
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	00da      	lsls	r2, r3, #3
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	4413      	add	r3, r2
 80024ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800250a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800250e:	b29a      	uxth	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	e01a      	b.n	800254c <HAL_PCD_EP_DB_Transmit+0xfa>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d116      	bne.n	800254c <HAL_PCD_EP_DB_Transmit+0xfa>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	4413      	add	r3, r2
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	00da      	lsls	r2, r3, #3
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	4413      	add	r3, r2
 8002540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2200      	movs	r2, #0
 800254a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	623b      	str	r3, [r7, #32]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d126      	bne.n	80025a8 <HAL_PCD_EP_DB_Transmit+0x156>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	00da      	lsls	r2, r3, #3
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	e017      	b.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d113      	bne.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x186>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	4413      	add	r3, r2
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00da      	lsls	r2, r3, #3
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	4413      	add	r3, r2
 80025cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2200      	movs	r2, #0
 80025d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f006 fca5 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 82d2 	beq.w	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	827b      	strh	r3, [r7, #18]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	8a7b      	ldrh	r3, [r7, #18]
 800261c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]
 8002630:	e2b0      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002656:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800266c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	b29b      	uxth	r3, r3
 800267e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 8284 	bne.w	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002694:	441a      	add	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a2:	441a      	add	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d309      	bcc.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e015      	b.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80026d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026de:	e009      	b.n	80026f4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d155      	bne.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x356>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	63bb      	str	r3, [r7, #56]	; 0x38
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	4413      	add	r3, r2
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00da      	lsls	r2, r3, #3
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	4413      	add	r3, r2
 800271e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d112      	bne.n	8002750 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002734:	b29a      	uxth	r2, r3
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002748:	b29a      	uxth	r2, r3
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	e047      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002752:	2b3e      	cmp	r3, #62	; 0x3e
 8002754:	d811      	bhi.n	800277a <HAL_PCD_EP_DB_Transmit+0x328>
 8002756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_PCD_EP_DB_Transmit+0x31a>
 8002766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002768:	3301      	adds	r3, #1
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
 800276c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276e:	b29b      	uxth	r3, r3
 8002770:	029b      	lsls	r3, r3, #10
 8002772:	b29a      	uxth	r2, r3
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	801a      	strh	r2, [r3, #0]
 8002778:	e032      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 800277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_PCD_EP_DB_Transmit+0x33e>
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	3b01      	subs	r3, #1
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	b29b      	uxth	r3, r3
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	b29b      	uxth	r3, r3
 8002798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e01b      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	785b      	ldrb	r3, [r3, #1]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d117      	bne.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x38e>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c4:	4413      	add	r3, r2
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	00da      	lsls	r2, r3, #3
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	4413      	add	r3, r2
 80027d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	891a      	ldrh	r2, [r3, #8]
 80027ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f004 fc70 	bl	80070d4 <USB_WritePMA>
 80027f4:	e1ce      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027fe:	b29b      	uxth	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4413      	add	r3, r2
 8002810:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800281a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002826:	429a      	cmp	r2, r3
 8002828:	d307      	bcc.n	800283a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	619a      	str	r2, [r3, #24]
 8002838:	e002      	b.n	8002840 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 80c4 	bne.w	80029d2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d126      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	4413      	add	r3, r2
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	00da      	lsls	r2, r3, #3
 8002870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002872:	4413      	add	r3, r2
 8002874:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002878:	66bb      	str	r3, [r7, #104]	; 0x68
 800287a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002884:	b29a      	uxth	r2, r3
 8002886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002898:	b29a      	uxth	r2, r3
 800289a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	e01a      	b.n	80028d6 <HAL_PCD_EP_DB_Transmit+0x484>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d116      	bne.n	80028d6 <HAL_PCD_EP_DB_Transmit+0x484>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	677b      	str	r3, [r7, #116]	; 0x74
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028bc:	4413      	add	r3, r2
 80028be:	677b      	str	r3, [r7, #116]	; 0x74
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	00da      	lsls	r2, r3, #3
 80028c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c8:	4413      	add	r3, r2
 80028ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028ce:	673b      	str	r3, [r7, #112]	; 0x70
 80028d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d2:	2200      	movs	r2, #0
 80028d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	67bb      	str	r3, [r7, #120]	; 0x78
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12f      	bne.n	8002944 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028fc:	4413      	add	r3, r2
 80028fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	00da      	lsls	r2, r3, #3
 8002908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800290c:	4413      	add	r3, r2
 800290e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002922:	b29a      	uxth	r2, r3
 8002924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293a:	b29a      	uxth	r2, r3
 800293c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	e017      	b.n	8002974 <HAL_PCD_EP_DB_Transmit+0x522>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d113      	bne.n	8002974 <HAL_PCD_EP_DB_Transmit+0x522>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002954:	b29b      	uxth	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295a:	4413      	add	r3, r2
 800295c:	67bb      	str	r3, [r7, #120]	; 0x78
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	00da      	lsls	r2, r3, #3
 8002964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002966:	4413      	add	r3, r2
 8002968:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800296c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800296e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002970:	2200      	movs	r2, #0
 8002972:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f006 fad7 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8104 	bne.w	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	441a      	add	r2, r3
 80029b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
 80029d0:	e0e0      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d121      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 80b4 	bne.w	8002b94 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a34:	441a      	add	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	441a      	add	r2, r3
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d309      	bcc.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	1ad2      	subs	r2, r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	e015      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8002a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a7e:	e009      	b.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	785b      	ldrb	r3, [r3, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d155      	bne.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab6:	4413      	add	r3, r2
 8002ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	00da      	lsls	r2, r3, #3
 8002ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d112      	bne.n	8002af6 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8002ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	e044      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af8:	2b3e      	cmp	r3, #62	; 0x3e
 8002afa:	d811      	bhi.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8002afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
 8002b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	3301      	adds	r3, #1
 8002b10:	657b      	str	r3, [r7, #84]	; 0x54
 8002b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	801a      	strh	r2, [r3, #0]
 8002b1e:	e02f      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	657b      	str	r3, [r7, #84]	; 0x54
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b32:	3b01      	subs	r3, #1
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
 8002b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	e018      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d114      	bne.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b64:	4413      	add	r3, r2
 8002b66:	667b      	str	r3, [r7, #100]	; 0x64
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00da      	lsls	r2, r3, #3
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
 8002b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6959      	ldr	r1, [r3, #20]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	895a      	ldrh	r2, [r3, #10]
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f004 faa0 	bl	80070d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bae:	823b      	strh	r3, [r7, #16]
 8002bb0:	8a3b      	ldrh	r3, [r7, #16]
 8002bb2:	f083 0310 	eor.w	r3, r3, #16
 8002bb6:	823b      	strh	r3, [r7, #16]
 8002bb8:	8a3b      	ldrh	r3, [r7, #16]
 8002bba:	f083 0320 	eor.w	r3, r3, #32
 8002bbe:	823b      	strh	r3, [r7, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	8a3b      	ldrh	r3, [r7, #16]
 8002bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3788      	adds	r7, #136	; 0x88
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b087      	sub	sp, #28
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c24:	897a      	ldrh	r2, [r7, #10]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c38:	893b      	ldrh	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	80da      	strh	r2, [r3, #6]
 8002c4c:	e00b      	b.n	8002c66 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2201      	movs	r2, #1
 8002c52:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40007000 	.word	0x40007000

08002ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d141      	bne.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cf6:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d131      	bne.n	8002d68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d04:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	4a46      	ldr	r2, [pc, #280]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2232      	movs	r2, #50	; 0x32
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	4a3f      	ldr	r2, [pc, #252]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	0c9b      	lsrs	r3, r3, #18
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3a:	e002      	b.n	8002d42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d102      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f2      	bne.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d56:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d158      	bne.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e057      	b.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d78:	e04d      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d141      	bne.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d82:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d131      	bne.n	8002df4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d96:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2232      	movs	r2, #50	; 0x32
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0c9b      	lsrs	r3, r3, #18
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc6:	e002      	b.n	8002dce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d102      	bne.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dee:	d112      	bne.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e011      	b.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e04:	e007      	b.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40007000 	.word	0x40007000
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3e:	6093      	str	r3, [r2, #8]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40007000 	.word	0x40007000

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e308      	b.n	8003474 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e78:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3e>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d002      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e2e3      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a8a      	ldr	r2, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a87      	ldr	r2, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fd fdac 	bl	8000a64 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fd fda8 	bl	8000a64 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e2a8      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fd fd98 	bl	8000a64 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fd fd94 	bl	8000a64 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e294      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d075      	beq.n	8003052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f70:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_OscConfig+0x136>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d002      	beq.n	8002f8c <HAL_RCC_OscConfig+0x13c>
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d11f      	bne.n	8002fcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8c:	4b5b      	ldr	r3, [pc, #364]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x154>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e267      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa4:	4b55      	ldr	r3, [pc, #340]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fb8:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fd05 	bl	80009cc <HAL_InitTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d043      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e253      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d023      	beq.n	800301c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd4:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a48      	ldr	r2, [pc, #288]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fd40 	bl	8000a64 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe8:	f7fd fd3c 	bl	8000a64 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e23c      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	061b      	lsls	r3, r3, #24
 8003014:	4939      	ldr	r1, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
 800301a:	e01a      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301c:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a36      	ldr	r2, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fd fd1c 	bl	8000a64 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fd fd18 	bl	8000a64 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e218      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1e0>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306c:	4a23      	ldr	r2, [pc, #140]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd fcf5 	bl	8000a64 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307e:	f7fd fcf1 	bl	8000a64 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1f1      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ef      	beq.n	800307e <HAL_RCC_OscConfig+0x22e>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fd fcd8 	bl	8000a64 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fd fcd4 	bl	8000a64 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1d4      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ef      	bne.n	80030b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80ab 	beq.w	800323c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_RCC_OscConfig+0x2b4>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e005      	b.n	8003106 <HAL_RCC_OscConfig+0x2b6>
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	20000004 	.word	0x20000004
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	4baf      	ldr	r3, [pc, #700]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4aae      	ldr	r2, [pc, #696]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
 8003116:	4bac      	ldr	r3, [pc, #688]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003122:	2301      	movs	r3, #1
 8003124:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003126:	4ba9      	ldr	r3, [pc, #676]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d118      	bne.n	8003164 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003132:	4ba6      	ldr	r3, [pc, #664]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4aa5      	ldr	r2, [pc, #660]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313e:	f7fd fc91 	bl	8000a64 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fd fc8d 	bl	8000a64 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e18d      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4b9c      	ldr	r3, [pc, #624]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <HAL_RCC_OscConfig+0x32e>
 800316c:	4b96      	ldr	r3, [pc, #600]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	4a95      	ldr	r2, [pc, #596]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317c:	e024      	b.n	80031c8 <HAL_RCC_OscConfig+0x378>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d110      	bne.n	80031a8 <HAL_RCC_OscConfig+0x358>
 8003186:	4b90      	ldr	r3, [pc, #576]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	4a8e      	ldr	r2, [pc, #568]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a8a      	ldr	r2, [pc, #552]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a6:	e00f      	b.n	80031c8 <HAL_RCC_OscConfig+0x378>
 80031a8:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a86      	ldr	r2, [pc, #536]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b8:	4b83      	ldr	r3, [pc, #524]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	4a82      	ldr	r2, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d0:	f7fd fc48 	bl	8000a64 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fd fc44 	bl	8000a64 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e142      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ed      	beq.n	80031d8 <HAL_RCC_OscConfig+0x388>
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fd fc31 	bl	8000a64 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fd fc2d 	bl	8000a64 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e12b      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800321c:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ed      	bne.n	8003206 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800322a:	7ffb      	ldrb	r3, [r7, #31]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a64      	ldr	r2, [pc, #400]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003250:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003256:	4a5c      	ldr	r2, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd fc00 	bl	8000a64 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003268:	f7fd fbfc 	bl	8000a64 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0fc      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800327a:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800327c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <HAL_RCC_OscConfig+0x418>
 8003288:	e01b      	b.n	80032c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328a:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fd fbe3 	bl	8000a64 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a2:	f7fd fbdf 	bl	8000a64 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0df      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80d3 	beq.w	8003472 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	f000 808d 	beq.w	80033f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d15a      	bne.n	8003398 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a38      	ldr	r2, [pc, #224]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd fbb9 	bl	8000a64 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fd fbb5 	bl	8000a64 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0b5      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_OscConfig+0x580>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6a11      	ldr	r1, [r2, #32]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003324:	3a01      	subs	r2, #1
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	4311      	orrs	r1, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800332e:	0212      	lsls	r2, r2, #8
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0552      	lsls	r2, r2, #21
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003342:	0852      	lsrs	r2, r2, #1
 8003344:	3a01      	subs	r2, #1
 8003346:	0652      	lsls	r2, r2, #25
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800334e:	06d2      	lsls	r2, r2, #27
 8003350:	430a      	orrs	r2, r1
 8003352:	491d      	ldr	r1, [pc, #116]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003364:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fd fb78 	bl	8000a64 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fd fb74 	bl	8000a64 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e074      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x528>
 8003396:	e06c      	b.n	8003472 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80033b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fb50 	bl	8000a64 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c6:	e00e      	b.n	80033e6 <HAL_RCC_OscConfig+0x596>
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
 80033d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fb46 	bl	8000a64 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e046      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_RCC_OscConfig+0x62c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x584>
 80033f2:	e03e      	b.n	8003472 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e039      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_OscConfig+0x62c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0203 	and.w	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	429a      	cmp	r2, r3
 8003412:	d12c      	bne.n	800346e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	3b01      	subs	r3, #1
 8003420:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d123      	bne.n	800346e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d11b      	bne.n	800346e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d113      	bne.n	800346e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d109      	bne.n	800346e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e11e      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 020f 	bic.w	r2, r3, #15
 80034ae:	498c      	ldr	r1, [pc, #560]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b8a      	ldr	r3, [pc, #552]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e106      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d073      	beq.n	80035bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d129      	bne.n	8003530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034dc:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0f4      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80034ec:	f000 f966 	bl	80037bc <RCC_GetSysClockFreqFromPLLSource>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_ClockConfig+0x268>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d93f      	bls.n	800357a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034fa:	4b7a      	ldr	r3, [pc, #488]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d033      	beq.n	800357a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d12f      	bne.n	800357a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800351a:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003522:	4a70      	ldr	r2, [pc, #448]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e024      	b.n	800357a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d107      	bne.n	8003548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003538:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0c6      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0be      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003558:	f000 f8ce 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 800355c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4a61      	ldr	r2, [pc, #388]	; (80036e8 <HAL_RCC_ClockConfig+0x268>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d909      	bls.n	800357a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003566:	4b5f      	ldr	r3, [pc, #380]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356e:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4957      	ldr	r1, [pc, #348]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fd fa6a 	bl	8000a64 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fd fa66 	bl	8000a64 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e095      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d023      	beq.n	8003610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035ec:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035f4:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4936      	ldr	r1, [pc, #216]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
 800360e:	e008      	b.n	8003622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d105      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003616:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800361c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003622:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d21d      	bcs.n	800366c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 020f 	bic.w	r2, r3, #15
 8003638:	4929      	ldr	r1, [pc, #164]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003640:	f7fd fa10 	bl	8000a64 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fd fa0c 	bl	8000a64 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e03b      	b.n	80036d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_ClockConfig+0x260>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d1ed      	bne.n	8003648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4917      	ldr	r1, [pc, #92]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	490f      	ldr	r1, [pc, #60]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036aa:	f000 f825 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_ClockConfig+0x264>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	490c      	ldr	r1, [pc, #48]	; (80036ec <HAL_RCC_ClockConfig+0x26c>)
 80036bc:	5ccb      	ldrb	r3, [r1, r3]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x270>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCC_ClockConfig+0x274>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd f97c 	bl	80009cc <HAL_InitTick>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40022000 	.word	0x40022000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	04c4b400 	.word	0x04c4b400
 80036ec:	08009528 	.word	0x08009528
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d102      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e047      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d102      	bne.n	8003722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	e03e      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003722:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b0c      	cmp	r3, #12
 800372c:	d136      	bne.n	800379c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3301      	adds	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d10c      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800374c:	4a1a      	ldr	r2, [pc, #104]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003756:	68d2      	ldr	r2, [r2, #12]
 8003758:	0a12      	lsrs	r2, r2, #8
 800375a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	617b      	str	r3, [r7, #20]
      break;
 8003764:	e00c      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003766:	4a13      	ldr	r2, [pc, #76]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	0a12      	lsrs	r2, r2, #8
 8003774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
      break;
 800377e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0e5b      	lsrs	r3, r3, #25
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	3301      	adds	r3, #1
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e001      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037a0:	693b      	ldr	r3, [r7, #16]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	007a1200 	.word	0x007a1200

080037bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d10c      	bne.n	80037fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ea:	68d2      	ldr	r2, [r2, #12]
 80037ec:	0a12      	lsrs	r2, r2, #8
 80037ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	617b      	str	r3, [r7, #20]
    break;
 80037f8:	e00c      	b.n	8003814 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	4a0e      	ldr	r2, [pc, #56]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	0a12      	lsrs	r2, r2, #8
 8003808:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
    break;
 8003812:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	0e5b      	lsrs	r3, r3, #25
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800382e:	687b      	ldr	r3, [r7, #4]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000
 8003840:	007a1200 	.word	0x007a1200
 8003844:	00f42400 	.word	0x00f42400

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003850:	2300      	movs	r3, #0
 8003852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003854:	2300      	movs	r3, #0
 8003856:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8098 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b40      	ldr	r3, [pc, #256]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003892:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a39      	ldr	r2, [pc, #228]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800389e:	f7fd f8e1 	bl	8000a64 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a4:	e009      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd f8dd 	bl	8000a64 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	74fb      	strb	r3, [r7, #19]
        break;
 80038b8:	e005      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ba:	4b30      	ldr	r3, [pc, #192]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ef      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d159      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038cc:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d019      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd f89d 	bl	8000a64 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392c:	e00b      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fd f899 	bl	8000a64 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d902      	bls.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	74fb      	strb	r3, [r7, #19]
            break;
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ec      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003970:	e008      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	74bb      	strb	r3, [r7, #18]
 8003976:	e005      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003984:	7c7b      	ldrb	r3, [r7, #17]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d105      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398a:	4baf      	ldr	r3, [pc, #700]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	4aae      	ldr	r2, [pc, #696]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a2:	4ba9      	ldr	r3, [pc, #676]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a8:	f023 0203 	bic.w	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	49a5      	ldr	r1, [pc, #660]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c4:	4ba0      	ldr	r3, [pc, #640]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f023 020c 	bic.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	499d      	ldr	r1, [pc, #628]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e6:	4b98      	ldr	r3, [pc, #608]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4994      	ldr	r1, [pc, #592]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a08:	4b8f      	ldr	r3, [pc, #572]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	498c      	ldr	r1, [pc, #560]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2a:	4b87      	ldr	r3, [pc, #540]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4983      	ldr	r1, [pc, #524]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	497b      	ldr	r1, [pc, #492]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4972      	ldr	r1, [pc, #456]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a90:	4b6d      	ldr	r3, [pc, #436]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	496a      	ldr	r1, [pc, #424]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	4961      	ldr	r1, [pc, #388]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ad4:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	4959      	ldr	r1, [pc, #356]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003af6:	4b54      	ldr	r3, [pc, #336]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4950      	ldr	r1, [pc, #320]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b18:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4948      	ldr	r1, [pc, #288]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d105      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b50:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	493a      	ldr	r1, [pc, #232]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b70:	4b35      	ldr	r3, [pc, #212]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b88:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	492c      	ldr	r1, [pc, #176]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d015      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	491e      	ldr	r1, [pc, #120]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bde:	d105      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4910      	ldr	r1, [pc, #64]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c16:	d105      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d018      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4902      	ldr	r1, [pc, #8]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c46:	e001      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c48:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c54:	d105      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d015      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	4917      	ldr	r1, [pc, #92]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	4909      	ldr	r1, [pc, #36]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc4:	d105      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05c      	beq.n	8003dac <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fd18 	bl	800073c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d16:	22ca      	movs	r2, #202	; 0xca
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d1c:	2253      	movs	r2, #83	; 0x53
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f871 	bl	8003e08 <RTC_EnterInitMode>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d133      	bne.n	8003d98 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d36:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4319      	orrs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	430b      	orrs	r3, r1
 8003d54:	4918      	ldr	r1, [pc, #96]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	4914      	ldr	r1, [pc, #80]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f880 	bl	8003e70 <RTC_ExitInitMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10e      	bne.n	8003d98 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a19      	ldr	r1, [r3, #32]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4319      	orrs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	4909      	ldr	r1, [pc, #36]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_RTC_Init+0xd8>)
 8003d9a:	22ff      	movs	r2, #255	; 0xff
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40002800 	.word	0x40002800

08003dbc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <HAL_RTC_WaitForSynchro+0x48>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <HAL_RTC_WaitForSynchro+0x48>)
 8003dca:	f023 0320 	bic.w	r3, r3, #32
 8003dce:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003dd0:	f7fc fe48 	bl	8000a64 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003dd6:	e009      	b.n	8003dec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dd8:	f7fc fe44 	bl	8000a64 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de6:	d901      	bls.n	8003dec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e006      	b.n	8003dfa <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RTC_WaitForSynchro+0x48>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40002800 	.word	0x40002800

08003e08 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003e14:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <RTC_EnterInitMode+0x64>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d120      	bne.n	8003e62 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e20:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <RTC_EnterInitMode+0x64>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <RTC_EnterInitMode+0x64>)
 8003e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e2a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003e2c:	f7fc fe1a 	bl	8000a64 <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e32:	e00d      	b.n	8003e50 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e34:	f7fc fe16 	bl	8000a64 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e42:	d905      	bls.n	8003e50 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <RTC_EnterInitMode+0x64>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <RTC_EnterInitMode+0x5a>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d1e8      	bne.n	8003e34 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40002800 	.word	0x40002800

08003e70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff91 	bl	8003dbc <HAL_RTC_WaitForSynchro>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01e      	beq.n	8003ede <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e017      	b.n	8003ede <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003eb4:	f023 0320 	bic.w	r3, r3, #32
 8003eb8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ff7e 	bl	8003dbc <HAL_RTC_WaitForSynchro>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <RTC_ExitInitMode+0x78>)
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
 8003edc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40002800 	.word	0x40002800

08003eec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e09d      	b.n	800403a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f0e:	d009      	beq.n	8003f24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	e005      	b.n	8003f24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fc56 	bl	80007f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d902      	bls.n	8003f6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e002      	b.n	8003f72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f7a:	d007      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0204 	and.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b088      	sub	sp, #32
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_SPI_Transmit+0x22>
 8004060:	2302      	movs	r3, #2
 8004062:	e158      	b.n	8004316 <HAL_SPI_Transmit+0x2d4>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406c:	f7fc fcfa 	bl	8000a64 <HAL_GetTick>
 8004070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d002      	beq.n	8004088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004086:	e13d      	b.n	8004304 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_Transmit+0x52>
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004098:	e134      	b.n	8004304 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2203      	movs	r2, #3
 800409e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d10f      	bne.n	8004106 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004104:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d007      	beq.n	8004124 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800412c:	d94b      	bls.n	80041c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_SPI_Transmit+0xfa>
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d13e      	bne.n	80041ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004160:	e02b      	b.n	80041ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d112      	bne.n	8004196 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004194:	e011      	b.n	80041ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fc fc65 	bl	8000a64 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d803      	bhi.n	80041ae <HAL_SPI_Transmit+0x16c>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Transmit+0x172>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041b8:	e0a4      	b.n	8004304 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ce      	bne.n	8004162 <HAL_SPI_Transmit+0x120>
 80041c4:	e07c      	b.n	80042c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x192>
 80041ce:	8afb      	ldrh	r3, [r7, #22]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d170      	bne.n	80042b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d912      	bls.n	8004204 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b02      	subs	r3, #2
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004202:	e058      	b.n	80042b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	7812      	ldrb	r2, [r2, #0]
 8004210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800422a:	e044      	b.n	80042b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d12b      	bne.n	8004292 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d912      	bls.n	800426a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b02      	subs	r3, #2
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004268:	e025      	b.n	80042b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004290:	e011      	b.n	80042b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004292:	f7fc fbe7 	bl	8000a64 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d803      	bhi.n	80042aa <HAL_SPI_Transmit+0x268>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a8:	d102      	bne.n	80042b0 <HAL_SPI_Transmit+0x26e>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042b4:	e026      	b.n	8004304 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1b5      	bne.n	800422c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fcdf 	bl	8004c88 <SPI_EndRxTxTransaction>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042de:	2300      	movs	r3, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e000      	b.n	8004304 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004302:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004314:	7ffb      	ldrb	r3, [r7, #31]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af02      	add	r7, sp, #8
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d112      	bne.n	8004362 <HAL_SPI_Receive+0x44>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10e      	bne.n	8004362 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2204      	movs	r2, #4
 8004348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f910 	bl	800457e <HAL_SPI_TransmitReceive>
 800435e:	4603      	mov	r3, r0
 8004360:	e109      	b.n	8004576 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_SPI_Receive+0x52>
 800436c:	2302      	movs	r3, #2
 800436e:	e102      	b.n	8004576 <HAL_SPI_Receive+0x258>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004378:	f7fc fb74 	bl	8000a64 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800438e:	e0e9      	b.n	8004564 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_SPI_Receive+0x7e>
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043a0:	e0e0      	b.n	8004564 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2204      	movs	r2, #4
 80043a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043ec:	d908      	bls.n	8004400 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e007      	b.n	8004410 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	d10f      	bne.n	800443a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b40      	cmp	r3, #64	; 0x40
 8004446:	d007      	beq.n	8004458 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004460:	d867      	bhi.n	8004532 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004462:	e030      	b.n	80044c6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d117      	bne.n	80044a2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f103 020c 	add.w	r2, r3, #12
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80044a0:	e011      	b.n	80044c6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a2:	f7fc fadf 	bl	8000a64 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d803      	bhi.n	80044ba <HAL_SPI_Receive+0x19c>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b8:	d102      	bne.n	80044c0 <HAL_SPI_Receive+0x1a2>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044c4:	e04e      	b.n	8004564 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1c8      	bne.n	8004464 <HAL_SPI_Receive+0x146>
 80044d2:	e034      	b.n	800453e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d115      	bne.n	800450e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	b292      	uxth	r2, r2
 80044ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800450c:	e011      	b.n	8004532 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450e:	f7fc faa9 	bl	8000a64 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d803      	bhi.n	8004526 <HAL_SPI_Receive+0x208>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004524:	d102      	bne.n	800452c <HAL_SPI_Receive+0x20e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004530:	e018      	b.n	8004564 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ca      	bne.n	80044d4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	6839      	ldr	r1, [r7, #0]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fb48 	bl	8004bd8 <SPI_EndRxTransaction>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
 8004560:	e000      	b.n	8004564 <HAL_SPI_Receive+0x246>
  }

error :
 8004562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	; 0x28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800458c:	2301      	movs	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x26>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e1fb      	b.n	800499c <HAL_SPI_TransmitReceive+0x41e>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ac:	f7fc fa5a 	bl	8000a64 <HAL_GetTick>
 80045b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045c0:	887b      	ldrh	r3, [r7, #2]
 80045c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045c4:	887b      	ldrh	r3, [r7, #2]
 80045c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045c8:	7efb      	ldrb	r3, [r7, #27]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d00e      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x6e>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d4:	d106      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x66>
 80045de:	7efb      	ldrb	r3, [r7, #27]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d003      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045ea:	e1cd      	b.n	8004988 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x80>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x80>
 80045f8:	887b      	ldrh	r3, [r7, #2]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004604:	e1c0      	b.n	8004988 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b04      	cmp	r3, #4
 8004610:	d003      	beq.n	800461a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2205      	movs	r2, #5
 8004616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	887a      	ldrh	r2, [r7, #2]
 800462a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800465c:	d802      	bhi.n	8004664 <HAL_SPI_TransmitReceive+0xe6>
 800465e:	8a3b      	ldrh	r3, [r7, #16]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d908      	bls.n	8004676 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	e007      	b.n	8004686 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004684:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d007      	beq.n	80046a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046ac:	d97c      	bls.n	80047a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x13e>
 80046b6:	8a7b      	ldrh	r3, [r7, #18]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d169      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	881a      	ldrh	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	1c9a      	adds	r2, r3, #2
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e0:	e056      	b.n	8004790 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d11b      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x1aa>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x1aa>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d113      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	881a      	ldrh	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d11c      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x1f2>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	b292      	uxth	r2, r2
 800474e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	1c9a      	adds	r2, r3, #2
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800476c:	2301      	movs	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004770:	f7fc f978 	bl	8000a64 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	429a      	cmp	r2, r3
 800477e:	d807      	bhi.n	8004790 <HAL_SPI_TransmitReceive+0x212>
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004786:	d003      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800478e:	e0fb      	b.n	8004988 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1a3      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x164>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d19d      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x164>
 80047a6:	e0df      	b.n	8004968 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x23a>
 80047b0:	8a7b      	ldrh	r3, [r7, #18]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 80cb 	bne.w	800494e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d912      	bls.n	80047e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b02      	subs	r3, #2
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047e6:	e0b2      	b.n	800494e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	7812      	ldrb	r2, [r2, #0]
 80047f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	e09e      	b.n	800494e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	d134      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	2b01      	cmp	r3, #1
 800482c:	d12c      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d912      	bls.n	800485e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b02      	subs	r3, #2
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800485c:	e012      	b.n	8004884 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b01      	cmp	r3, #1
 8004894:	d148      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x3aa>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d042      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d923      	bls.n	80048f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	b292      	uxth	r2, r2
 80048ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b02      	subs	r3, #2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d81f      	bhi.n	8004924 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	e016      	b.n	8004924 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f103 020c 	add.w	r2, r3, #12
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004928:	f7fc f89c 	bl	8000a64 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_TransmitReceive+0x3c2>
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493e:	d102      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x3c8>
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800494c:	e01c      	b.n	8004988 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	f47f af5b 	bne.w	8004810 <HAL_SPI_TransmitReceive+0x292>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	f47f af54 	bne.w	8004810 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f98b 	bl	8004c88 <SPI_EndRxTxTransaction>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	661a      	str	r2, [r3, #96]	; 0x60
 8004984:	e000      	b.n	8004988 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004986:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049b4:	f7fc f856 	bl	8000a64 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049c4:	f7fc f84e 	bl	8000a64 <HAL_GetTick>
 80049c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049ca:	4b39      	ldr	r3, [pc, #228]	; (8004ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	015b      	lsls	r3, r3, #5
 80049d0:	0d1b      	lsrs	r3, r3, #20
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049da:	e054      	b.n	8004a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e2:	d050      	beq.n	8004a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049e4:	f7fc f83e 	bl	8000a64 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d902      	bls.n	80049fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d13d      	bne.n	8004a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a12:	d111      	bne.n	8004a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a1c:	d004      	beq.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d107      	bne.n	8004a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d10f      	bne.n	8004a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e017      	b.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d19b      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000000 	.word	0x20000000

08004ab4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ac2:	f7fb ffcf 	bl	8000a64 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	4413      	add	r3, r2
 8004ad0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ad2:	f7fb ffc7 	bl	8000a64 <HAL_GetTick>
 8004ad6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ad8:	4b3e      	ldr	r3, [pc, #248]	; (8004bd4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00da      	lsls	r2, r3, #3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	0d1b      	lsrs	r3, r3, #20
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004af0:	e062      	b.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004af8:	d109      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004b0c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b14:	d050      	beq.n	8004bb8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b16:	f7fb ffa5 	bl	8000a64 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d902      	bls.n	8004b2c <SPI_WaitFifoStateUntilTimeout+0x78>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d13d      	bne.n	8004ba8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b44:	d111      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4e:	d004      	beq.n	8004b5a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d107      	bne.n	8004b6a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	d10f      	bne.n	8004b94 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e010      	b.n	8004bca <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d194      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000000 	.word	0x20000000

08004bd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bec:	d111      	bne.n	8004c12 <SPI_EndRxTransaction+0x3a>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d004      	beq.n	8004c02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d107      	bne.n	8004c12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff fec1 	bl	80049a4 <SPI_WaitFlagStateUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	f043 0220 	orr.w	r2, r3, #32
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e023      	b.n	8004c80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c40:	d11d      	bne.n	8004c7e <SPI_EndRxTransaction+0xa6>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4a:	d004      	beq.n	8004c56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	d113      	bne.n	8004c7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff ff26 	bl	8004ab4 <SPI_WaitFifoStateUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e000      	b.n	8004c80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff ff07 	bl	8004ab4 <SPI_WaitFifoStateUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	f043 0220 	orr.w	r2, r3, #32
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e027      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff fe6c 	bl	80049a4 <SPI_WaitFlagStateUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e014      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fee0 	bl	8004ab4 <SPI_WaitFifoStateUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e000      	b.n	8004d0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d24:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d4a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4013      	ands	r3, r2
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d78:	b084      	sub	sp, #16
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	f107 0014 	add.w	r0, r7, #20
 8004d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	b004      	add	sp, #16
 8004db8:	4770      	bx	lr
	...

08004dbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b09b      	sub	sp, #108	; 0x6c
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	78db      	ldrb	r3, [r3, #3]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d81f      	bhi.n	8004e2e <USB_ActivateEndpoint+0x72>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <USB_ActivateEndpoint+0x38>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e37 	.word	0x08004e37
 8004e00:	08004e13 	.word	0x08004e13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e10:	e012      	b.n	8004e38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e1e:	e00b      	b.n	8004e38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e2c:	e004      	b.n	8004e38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004e34:	e000      	b.n	8004e38 <USB_ActivateEndpoint+0x7c>
      break;
 8004e36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	b21a      	sxth	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b21b      	sxth	r3, r3
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	b21b      	sxth	r3, r3
 8004e7e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	7b1b      	ldrb	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 8149 	bne.w	8005140 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8084 	beq.w	8004fc0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	00da      	lsls	r2, r3, #3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	88db      	ldrh	r3, [r3, #6]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	81fb      	strh	r3, [r7, #14]
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <USB_ActivateEndpoint+0x180>
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	81bb      	strh	r3, [r7, #12]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	89bb      	ldrh	r3, [r7, #12]
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d020      	beq.n	8004f86 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5a:	813b      	strh	r3, [r7, #8]
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	f083 0320 	eor.w	r3, r3, #32
 8004f62:	813b      	strh	r3, [r7, #8]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	893b      	ldrh	r3, [r7, #8]
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]
 8004f84:	e27f      	b.n	8005486 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	897b      	ldrh	r3, [r7, #10]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
 8004fbe:	e262      	b.n	8005486 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	4413      	add	r3, r2
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	00da      	lsls	r2, r3, #3
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	4413      	add	r3, r2
 8004fde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	88db      	ldrh	r3, [r3, #6]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4413      	add	r3, r2
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	00da      	lsls	r2, r3, #3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	4413      	add	r3, r2
 8005012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005016:	623b      	str	r3, [r7, #32]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d112      	bne.n	8005046 <USB_ActivateEndpoint+0x28a>
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800502a:	b29a      	uxth	r2, r3
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	801a      	strh	r2, [r3, #0]
 8005044:	e02f      	b.n	80050a6 <USB_ActivateEndpoint+0x2ea>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b3e      	cmp	r3, #62	; 0x3e
 800504c:	d813      	bhi.n	8005076 <USB_ActivateEndpoint+0x2ba>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	663b      	str	r3, [r7, #96]	; 0x60
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <USB_ActivateEndpoint+0x2ac>
 8005062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005064:	3301      	adds	r3, #1
 8005066:	663b      	str	r3, [r7, #96]	; 0x60
 8005068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800506a:	b29b      	uxth	r3, r3
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	b29a      	uxth	r2, r3
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e017      	b.n	80050a6 <USB_ActivateEndpoint+0x2ea>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	663b      	str	r3, [r7, #96]	; 0x60
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <USB_ActivateEndpoint+0x2d4>
 800508a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800508c:	3b01      	subs	r3, #1
 800508e:	663b      	str	r3, [r7, #96]	; 0x60
 8005090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29b      	uxth	r3, r3
 8005098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	83fb      	strh	r3, [r7, #30]
 80050b4:	8bfb      	ldrh	r3, [r7, #30]
 80050b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01b      	beq.n	80050f6 <USB_ActivateEndpoint+0x33a>
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d4:	83bb      	strh	r3, [r7, #28]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	8bbb      	ldrh	r3, [r7, #28]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	837b      	strh	r3, [r7, #26]
 800510e:	8b7b      	ldrh	r3, [r7, #26]
 8005110:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005114:	837b      	strh	r3, [r7, #26]
 8005116:	8b7b      	ldrh	r3, [r7, #26]
 8005118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800511c:	837b      	strh	r3, [r7, #26]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	441a      	add	r2, r3
 8005128:	8b7b      	ldrh	r3, [r7, #26]
 800512a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]
 800513e:	e1a2      	b.n	8005486 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005170:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800518c:	4413      	add	r3, r2
 800518e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005198:	4413      	add	r3, r2
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	657b      	str	r3, [r7, #84]	; 0x54
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	891b      	ldrh	r3, [r3, #8]
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	653b      	str	r3, [r7, #80]	; 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	4413      	add	r3, r2
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00da      	lsls	r2, r3, #3
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	895b      	ldrh	r3, [r3, #10]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 8091 	bne.w	8005310 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01b      	beq.n	800523e <USB_ActivateEndpoint+0x482>
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	873b      	strh	r3, [r7, #56]	; 0x38
 800524c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01b      	beq.n	800528e <USB_ActivateEndpoint+0x4d2>
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	441a      	add	r2, r3
 80052c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	441a      	add	r2, r3
 80052f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e0ba      	b.n	8005486 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01d      	beq.n	8005368 <USB_ActivateEndpoint+0x5ac>
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005378:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01d      	beq.n	80053c0 <USB_ActivateEndpoint+0x604>
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	441a      	add	r2, r3
 80053a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d024      	beq.n	8005412 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053e6:	f083 0320 	eor.w	r3, r3, #32
 80053ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
 8005410:	e01d      	b.n	800544e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005482:	b29b      	uxth	r3, r3
 8005484:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800548a:	4618      	mov	r0, r3
 800548c:	376c      	adds	r7, #108	; 0x6c
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005498:	b480      	push	{r7}
 800549a:	b08d      	sub	sp, #52	; 0x34
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	7b1b      	ldrb	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 808e 	bne.w	80055c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d044      	beq.n	800553e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	81bb      	strh	r3, [r7, #12]
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01b      	beq.n	8005504 <USB_DeactivateEndpoint+0x6c>
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	817b      	strh	r3, [r7, #10]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551a:	813b      	strh	r3, [r7, #8]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	893b      	ldrh	r3, [r7, #8]
 8005528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005538:	b29b      	uxth	r3, r3
 800553a:	8013      	strh	r3, [r2, #0]
 800553c:	e192      	b.n	8005864 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	827b      	strh	r3, [r7, #18]
 800554c:	8a7b      	ldrh	r3, [r7, #18]
 800554e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01b      	beq.n	800558e <USB_DeactivateEndpoint+0xf6>
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	823b      	strh	r3, [r7, #16]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	8a3b      	ldrh	r3, [r7, #16]
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	81fb      	strh	r3, [r7, #14]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	89fb      	ldrh	r3, [r7, #14]
 80055b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	8013      	strh	r3, [r2, #0]
 80055c6:	e14d      	b.n	8005864 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 80a5 	bne.w	800571c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	843b      	strh	r3, [r7, #32]
 80055e0:	8c3b      	ldrh	r3, [r7, #32]
 80055e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01b      	beq.n	8005622 <USB_DeactivateEndpoint+0x18a>
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	83fb      	strh	r3, [r7, #30]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8bfb      	ldrh	r3, [r7, #30]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	83bb      	strh	r3, [r7, #28]
 8005630:	8bbb      	ldrh	r3, [r7, #28]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01b      	beq.n	8005672 <USB_DeactivateEndpoint+0x1da>
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	837b      	strh	r3, [r7, #26]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8b7b      	ldrh	r3, [r7, #26]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	833b      	strh	r3, [r7, #24]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	8b3b      	ldrh	r3, [r7, #24]
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	82fb      	strh	r3, [r7, #22]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	8afb      	ldrh	r3, [r7, #22]
 80056ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056de:	b29b      	uxth	r3, r3
 80056e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f8:	82bb      	strh	r3, [r7, #20]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	8abb      	ldrh	r3, [r7, #20]
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
 800571a:	e0a3      	b.n	8005864 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800572a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800572c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <USB_DeactivateEndpoint+0x2d4>
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	441a      	add	r2, r3
 8005756:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	857b      	strh	r3, [r7, #42]	; 0x2a
 800577a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <USB_DeactivateEndpoint+0x324>
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	853b      	strh	r3, [r7, #40]	; 0x28
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	b29b      	uxth	r3, r3
 800582a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	847b      	strh	r3, [r7, #34]	; 0x22
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	441a      	add	r2, r3
 800584e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3734      	adds	r7, #52	; 0x34
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b0cc      	sub	sp, #304	; 0x130
 8005876:	af00      	add	r7, sp, #0
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	6018      	str	r0, [r3, #0]
 800587c:	463b      	mov	r3, r7
 800587e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	2b01      	cmp	r3, #1
 8005888:	f040 872e 	bne.w	80066e8 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d905      	bls.n	80058a8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80058a6:	e004      	b.n	80058b2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	7b1b      	ldrb	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d134      	bne.n	8005926 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	88da      	ldrh	r2, [r3, #6]
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	1d38      	adds	r0, r7, #4
 80058d0:	6800      	ldr	r0, [r0, #0]
 80058d2:	f001 fbff 	bl	80070d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058d6:	f107 0310 	add.w	r3, r7, #16
 80058da:	1d3a      	adds	r2, r7, #4
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	f107 0210 	add.w	r2, r7, #16
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	440a      	add	r2, r1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	00da      	lsls	r2, r3, #3
 8005902:	f107 0310 	add.w	r3, r7, #16
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4413      	add	r3, r2
 800590a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005918:	b29a      	uxth	r2, r3
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	f000 beac 	b.w	800667e <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	78db      	ldrb	r3, [r3, #3]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f040 838c 	bne.w	800604a <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	f240 8330 	bls.w	8005fa4 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005962:	1d3b      	adds	r3, r7, #4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005992:	1ad2      	subs	r2, r2, r3
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800599a:	1d3b      	adds	r3, r7, #4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 819e 	beq.w	8005cf2 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059ba:	1d3a      	adds	r2, r7, #4
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d17a      	bne.n	8005ac0 <USB_EPStartXfer+0x24e>
 80059ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059ce:	1d3a      	adds	r2, r7, #4
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4619      	mov	r1, r3
 80059e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	440a      	add	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00da      	lsls	r2, r3, #3
 80059f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d11a      	bne.n	8005a46 <USB_EPStartXfer+0x1d4>
 8005a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e062      	b.n	8005b0c <USB_EPStartXfer+0x29a>
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a4c:	d819      	bhi.n	8005a82 <USB_EPStartXfer+0x210>
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <USB_EPStartXfer+0x1fc>
 8005a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e044      	b.n	8005b0c <USB_EPStartXfer+0x29a>
 8005a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <USB_EPStartXfer+0x230>
 8005a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e025      	b.n	8005b0c <USB_EPStartXfer+0x29a>
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d120      	bne.n	8005b0c <USB_EPStartXfer+0x29a>
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ada:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	463b      	mov	r3, r7
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	00da      	lsls	r2, r3, #3
 8005aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8005af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	895b      	ldrh	r3, [r3, #10]
 8005b12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6959      	ldr	r1, [r3, #20]
 8005b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b26:	1d38      	adds	r0, r7, #4
 8005b28:	6800      	ldr	r0, [r0, #0]
 8005b2a:	f001 fad3 	bl	80070d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b2e:	463b      	mov	r3, r7
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b38:	441a      	add	r2, r3
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	463b      	mov	r3, r7
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d909      	bls.n	8005b64 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	1ad2      	subs	r2, r2, r3
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	621a      	str	r2, [r3, #32]
 8005b62:	e008      	b.n	8005b76 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005b6e:	463b      	mov	r3, r7
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d17a      	bne.n	8005c76 <USB_EPStartXfer+0x404>
 8005b80:	f107 0318 	add.w	r3, r7, #24
 8005b84:	1d3a      	adds	r2, r7, #4
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	1d3b      	adds	r3, r7, #4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4619      	mov	r1, r3
 8005b96:	f107 0318 	add.w	r3, r7, #24
 8005b9a:	f107 0218 	add.w	r2, r7, #24
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	f107 0318 	add.w	r3, r7, #24
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11a      	bne.n	8005bfc <USB_EPStartXfer+0x38a>
 8005bc6:	f107 0314 	add.w	r3, r7, #20
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e067      	b.n	8005ccc <USB_EPStartXfer+0x45a>
 8005bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c00:	2b3e      	cmp	r3, #62	; 0x3e
 8005c02:	d819      	bhi.n	8005c38 <USB_EPStartXfer+0x3c6>
 8005c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d004      	beq.n	8005c24 <USB_EPStartXfer+0x3b2>
 8005c1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	f107 0314 	add.w	r3, r7, #20
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e049      	b.n	8005ccc <USB_EPStartXfer+0x45a>
 8005c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <USB_EPStartXfer+0x3e6>
 8005c4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c52:	3b01      	subs	r3, #1
 8005c54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e02a      	b.n	8005ccc <USB_EPStartXfer+0x45a>
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d125      	bne.n	8005ccc <USB_EPStartXfer+0x45a>
 8005c80:	f107 0320 	add.w	r3, r7, #32
 8005c84:	1d3a      	adds	r2, r7, #4
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	f107 0320 	add.w	r3, r7, #32
 8005c9a:	f107 0220 	add.w	r2, r7, #32
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	00da      	lsls	r2, r3, #3
 8005cac:	f107 0320 	add.w	r3, r7, #32
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8005cb8:	f107 031c 	add.w	r3, r7, #28
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f107 031c 	add.w	r3, r7, #28
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	891b      	ldrh	r3, [r3, #8]
 8005cd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6959      	ldr	r1, [r3, #20]
 8005cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ce6:	1d38      	adds	r0, r7, #4
 8005ce8:	6800      	ldr	r0, [r0, #0]
 8005cea:	f001 f9f3 	bl	80070d4 <USB_WritePMA>
 8005cee:	f000 bcc6 	b.w	800667e <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d164      	bne.n	8005dc6 <USB_EPStartXfer+0x554>
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d10:	4413      	add	r3, r2
 8005d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d14:	463b      	mov	r3, r7
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	00da      	lsls	r2, r3, #3
 8005d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d112      	bne.n	8005d54 <USB_EPStartXfer+0x4e2>
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e057      	b.n	8005e04 <USB_EPStartXfer+0x592>
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5a:	d817      	bhi.n	8005d8c <USB_EPStartXfer+0x51a>
 8005d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <USB_EPStartXfer+0x50a>
 8005d72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d76:	3301      	adds	r3, #1
 8005d78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e03b      	b.n	8005e04 <USB_EPStartXfer+0x592>
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <USB_EPStartXfer+0x53a>
 8005da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005dac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e01e      	b.n	8005e04 <USB_EPStartXfer+0x592>
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d119      	bne.n	8005e04 <USB_EPStartXfer+0x592>
 8005dd0:	1d3b      	adds	r3, r7, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd6:	1d3b      	adds	r3, r7, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de4:	4413      	add	r3, r2
 8005de6:	653b      	str	r3, [r7, #80]	; 0x50
 8005de8:	463b      	mov	r3, r7
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	00da      	lsls	r2, r3, #3
 8005df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df2:	4413      	add	r3, r2
 8005df4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	891b      	ldrh	r3, [r3, #8]
 8005e0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6959      	ldr	r1, [r3, #20]
 8005e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e1e:	1d38      	adds	r0, r7, #4
 8005e20:	6800      	ldr	r0, [r0, #0]
 8005e22:	f001 f957 	bl	80070d4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695a      	ldr	r2, [r3, #20]
 8005e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e30:	441a      	add	r2, r3
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6a1a      	ldr	r2, [r3, #32]
 8005e3e:	463b      	mov	r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d909      	bls.n	8005e5c <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
 8005e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	621a      	str	r2, [r3, #32]
 8005e5a:	e008      	b.n	8005e6e <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	643b      	str	r3, [r7, #64]	; 0x40
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d164      	bne.n	8005f48 <USB_EPStartXfer+0x6d6>
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	4413      	add	r3, r2
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d112      	bne.n	8005ed6 <USB_EPStartXfer+0x664>
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e054      	b.n	8005f80 <USB_EPStartXfer+0x70e>
 8005ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eda:	2b3e      	cmp	r3, #62	; 0x3e
 8005edc:	d817      	bhi.n	8005f0e <USB_EPStartXfer+0x69c>
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <USB_EPStartXfer+0x68c>
 8005ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	029b      	lsls	r3, r3, #10
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	e038      	b.n	8005f80 <USB_EPStartXfer+0x70e>
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d104      	bne.n	8005f2e <USB_EPStartXfer+0x6bc>
 8005f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	e01b      	b.n	8005f80 <USB_EPStartXfer+0x70e>
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d116      	bne.n	8005f80 <USB_EPStartXfer+0x70e>
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f60:	4413      	add	r3, r2
 8005f62:	643b      	str	r3, [r7, #64]	; 0x40
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	00da      	lsls	r2, r3, #3
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f80:	463b      	mov	r3, r7
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	895b      	ldrh	r3, [r3, #10]
 8005f86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6959      	ldr	r1, [r3, #20]
 8005f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f9a:	1d38      	adds	r0, r7, #4
 8005f9c:	6800      	ldr	r0, [r0, #0]
 8005f9e:	f001 f899 	bl	80070d4 <USB_WritePMA>
 8005fa2:	e36c      	b.n	800667e <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005fcc:	1d3b      	adds	r3, r7, #4
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ff2:	1d3b      	adds	r3, r7, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006006:	4413      	add	r3, r2
 8006008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800600a:	463b      	mov	r3, r7
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	00da      	lsls	r2, r3, #3
 8006012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006014:	4413      	add	r3, r2
 8006016:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800601a:	65bb      	str	r3, [r7, #88]	; 0x58
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	b29a      	uxth	r2, r3
 8006022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006024:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	891b      	ldrh	r3, [r3, #8]
 800602c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006030:	463b      	mov	r3, r7
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6959      	ldr	r1, [r3, #20]
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	b29b      	uxth	r3, r3
 800603c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006040:	1d38      	adds	r0, r7, #4
 8006042:	6800      	ldr	r0, [r0, #0]
 8006044:	f001 f846 	bl	80070d4 <USB_WritePMA>
 8006048:	e319      	b.n	800667e <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	463b      	mov	r3, r7
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006064:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006068:	1d3b      	adds	r3, r7, #4
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	463b      	mov	r3, r7
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	441a      	add	r2, r3
 8006076:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800608e:	463b      	mov	r3, r7
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8162 	beq.w	8006380 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d164      	bne.n	8006198 <USB_EPStartXfer+0x926>
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060e2:	4413      	add	r3, r2
 80060e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	00da      	lsls	r2, r3, #3
 80060ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f6:	677b      	str	r3, [r7, #116]	; 0x74
 80060f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d112      	bne.n	8006126 <USB_EPStartXfer+0x8b4>
 8006100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800610a:	b29a      	uxth	r2, r3
 800610c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e057      	b.n	80061d6 <USB_EPStartXfer+0x964>
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	2b3e      	cmp	r3, #62	; 0x3e
 800612c:	d817      	bhi.n	800615e <USB_EPStartXfer+0x8ec>
 800612e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <USB_EPStartXfer+0x8dc>
 8006144:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800614e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006152:	b29b      	uxth	r3, r3
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	e03b      	b.n	80061d6 <USB_EPStartXfer+0x964>
 800615e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800616c:	f003 031f 	and.w	r3, r3, #31
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <USB_EPStartXfer+0x90c>
 8006174:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006178:	3b01      	subs	r3, #1
 800617a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800617e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006190:	b29a      	uxth	r2, r3
 8006192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e01e      	b.n	80061d6 <USB_EPStartXfer+0x964>
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d119      	bne.n	80061d6 <USB_EPStartXfer+0x964>
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061b2:	4413      	add	r3, r2
 80061b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061b8:	463b      	mov	r3, r7
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	00da      	lsls	r2, r3, #3
 80061c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061c4:	4413      	add	r3, r2
 80061c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80061d6:	463b      	mov	r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	895b      	ldrh	r3, [r3, #10]
 80061dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061e0:	463b      	mov	r3, r7
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6959      	ldr	r1, [r3, #20]
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061f0:	1d38      	adds	r0, r7, #4
 80061f2:	6800      	ldr	r0, [r0, #0]
 80061f4:	f000 ff6e 	bl	80070d4 <USB_WritePMA>
          ep->xfer_buff += len;
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	441a      	add	r2, r3
 8006204:	463b      	mov	r3, r7
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d909      	bls.n	800622e <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a1a      	ldr	r2, [r3, #32]
 8006220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	621a      	str	r2, [r3, #32]
 800622c:	e008      	b.n	8006240 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800622e:	463b      	mov	r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 821a 	beq.w	800667e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d164      	bne.n	800631e <USB_EPStartXfer+0xaac>
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	66bb      	str	r3, [r7, #104]	; 0x68
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006262:	b29b      	uxth	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006268:	4413      	add	r3, r2
 800626a:	66bb      	str	r3, [r7, #104]	; 0x68
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	00da      	lsls	r2, r3, #3
 8006274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006276:	4413      	add	r3, r2
 8006278:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800627c:	667b      	str	r3, [r7, #100]	; 0x64
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d112      	bne.n	80062ac <USB_EPStartXfer+0xa3a>
 8006286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	b29b      	uxth	r3, r3
 800628c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006290:	b29a      	uxth	r2, r3
 8006292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	e057      	b.n	800635c <USB_EPStartXfer+0xaea>
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	2b3e      	cmp	r3, #62	; 0x3e
 80062b2:	d817      	bhi.n	80062e4 <USB_EPStartXfer+0xa72>
 80062b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <USB_EPStartXfer+0xa62>
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ce:	3301      	adds	r3, #1
 80062d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d8:	b29b      	uxth	r3, r3
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e03b      	b.n	800635c <USB_EPStartXfer+0xaea>
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0xa92>
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006308:	b29b      	uxth	r3, r3
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006316:	b29a      	uxth	r2, r3
 8006318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e01e      	b.n	800635c <USB_EPStartXfer+0xaea>
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d119      	bne.n	800635c <USB_EPStartXfer+0xaea>
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800633c:	4413      	add	r3, r2
 800633e:	673b      	str	r3, [r7, #112]	; 0x70
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800634a:	4413      	add	r3, r2
 800634c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006356:	b29a      	uxth	r2, r3
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800635c:	463b      	mov	r3, r7
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	891b      	ldrh	r3, [r3, #8]
 8006362:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006366:	463b      	mov	r3, r7
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6959      	ldr	r1, [r3, #20]
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	b29b      	uxth	r3, r3
 8006372:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006376:	1d38      	adds	r0, r7, #4
 8006378:	6800      	ldr	r0, [r0, #0]
 800637a:	f000 feab 	bl	80070d4 <USB_WritePMA>
 800637e:	e17e      	b.n	800667e <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d16f      	bne.n	800646a <USB_EPStartXfer+0xbf8>
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063a2:	4413      	add	r3, r2
 80063a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	00da      	lsls	r2, r3, #3
 80063b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <USB_EPStartXfer+0xb82>
 80063c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e05f      	b.n	80064b4 <USB_EPStartXfer+0xc42>
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	2b3e      	cmp	r3, #62	; 0x3e
 80063fa:	d818      	bhi.n	800642e <USB_EPStartXfer+0xbbc>
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d004      	beq.n	800641c <USB_EPStartXfer+0xbaa>
 8006412:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006416:	3301      	adds	r3, #1
 8006418:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800641c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006420:	b29b      	uxth	r3, r3
 8006422:	029b      	lsls	r3, r3, #10
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e042      	b.n	80064b4 <USB_EPStartXfer+0xc42>
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USB_EPStartXfer+0xbdc>
 8006444:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006448:	3b01      	subs	r3, #1
 800644a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800644e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006452:	b29b      	uxth	r3, r3
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e024      	b.n	80064b4 <USB_EPStartXfer+0xc42>
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d11f      	bne.n	80064b4 <USB_EPStartXfer+0xc42>
 8006474:	1d3b      	adds	r3, r7, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006484:	b29b      	uxth	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800648c:	4413      	add	r3, r2
 800648e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	00da      	lsls	r2, r3, #3
 800649a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	891b      	ldrh	r3, [r3, #8]
 80064ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064be:	463b      	mov	r3, r7
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6959      	ldr	r1, [r3, #20]
 80064c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064ce:	1d38      	adds	r0, r7, #4
 80064d0:	6800      	ldr	r0, [r0, #0]
 80064d2:	f000 fdff 	bl	80070d4 <USB_WritePMA>
          ep->xfer_buff += len;
 80064d6:	463b      	mov	r3, r7
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	441a      	add	r2, r3
 80064e2:	463b      	mov	r3, r7
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d909      	bls.n	800650c <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	463b      	mov	r3, r7
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	621a      	str	r2, [r3, #32]
 800650a:	e008      	b.n	800651e <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800650c:	463b      	mov	r3, r7
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006516:	463b      	mov	r3, r7
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800651e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80ab 	beq.w	800667e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006528:	1d3b      	adds	r3, r7, #4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d16f      	bne.n	800661a <USB_EPStartXfer+0xda8>
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006552:	4413      	add	r3, r2
 8006554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	00da      	lsls	r2, r3, #3
 8006560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006564:	4413      	add	r3, r2
 8006566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800656a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800656e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <USB_EPStartXfer+0xd32>
 8006576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006582:	b29a      	uxth	r2, r3
 8006584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006588:	801a      	strh	r2, [r3, #0]
 800658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	e05b      	b.n	800665c <USB_EPStartXfer+0xdea>
 80065a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a8:	2b3e      	cmp	r3, #62	; 0x3e
 80065aa:	d818      	bhi.n	80065de <USB_EPStartXfer+0xd6c>
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <USB_EPStartXfer+0xd5a>
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	3301      	adds	r3, #1
 80065c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	029b      	lsls	r3, r3, #10
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e03e      	b.n	800665c <USB_EPStartXfer+0xdea>
 80065de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <USB_EPStartXfer+0xd8c>
 80065f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f8:	3b01      	subs	r3, #1
 80065fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006602:	b29b      	uxth	r3, r3
 8006604:	029b      	lsls	r3, r3, #10
 8006606:	b29b      	uxth	r3, r3
 8006608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e020      	b.n	800665c <USB_EPStartXfer+0xdea>
 800661a:	463b      	mov	r3, r7
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d11b      	bne.n	800665c <USB_EPStartXfer+0xdea>
 8006624:	1d3b      	adds	r3, r7, #4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006634:	4413      	add	r3, r2
 8006636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800663a:	463b      	mov	r3, r7
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	00da      	lsls	r2, r3, #3
 8006642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006646:	4413      	add	r3, r2
 8006648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800664c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006654:	b29a      	uxth	r2, r3
 8006656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	895b      	ldrh	r3, [r3, #10]
 8006662:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6959      	ldr	r1, [r3, #20]
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	b29b      	uxth	r3, r3
 8006672:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006676:	1d38      	adds	r0, r7, #4
 8006678:	6800      	ldr	r0, [r0, #0]
 800667a:	f000 fd2b 	bl	80070d4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800667e:	1d3b      	adds	r3, r7, #4
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f107 020a 	add.w	r2, r7, #10
 8006694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669c:	8013      	strh	r3, [r2, #0]
 800669e:	f107 030a 	add.w	r3, r7, #10
 80066a2:	f107 020a 	add.w	r2, r7, #10
 80066a6:	8812      	ldrh	r2, [r2, #0]
 80066a8:	f082 0210 	eor.w	r2, r2, #16
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	f107 030a 	add.w	r3, r7, #10
 80066b2:	f107 020a 	add.w	r2, r7, #10
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	f082 0220 	eor.w	r2, r2, #32
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	f107 030a 	add.w	r3, r7, #10
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
 80066e6:	e3b5      	b.n	8006e54 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	7b1b      	ldrb	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 8090 	bne.w	8006814 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066f4:	463b      	mov	r3, r7
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	429a      	cmp	r2, r3
 8006702:	d90e      	bls.n	8006722 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800670e:	463b      	mov	r3, r7
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	619a      	str	r2, [r3, #24]
 8006720:	e008      	b.n	8006734 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006722:	463b      	mov	r3, r7
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800672c:	463b      	mov	r3, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006734:	1d3b      	adds	r3, r7, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800673c:	1d3b      	adds	r3, r7, #4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006744:	b29b      	uxth	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800674c:	4413      	add	r3, r2
 800674e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006752:	463b      	mov	r3, r7
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	00da      	lsls	r2, r3, #3
 800675a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800675e:	4413      	add	r3, r2
 8006760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d116      	bne.n	800679e <USB_EPStartXfer+0xf2c>
 8006770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e32c      	b.n	8006df8 <USB_EPStartXfer+0x1586>
 800679e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a2:	2b3e      	cmp	r3, #62	; 0x3e
 80067a4:	d818      	bhi.n	80067d8 <USB_EPStartXfer+0xf66>
 80067a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d004      	beq.n	80067c6 <USB_EPStartXfer+0xf54>
 80067bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c0:	3301      	adds	r3, #1
 80067c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e30f      	b.n	8006df8 <USB_EPStartXfer+0x1586>
 80067d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <USB_EPStartXfer+0xf86>
 80067ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f2:	3b01      	subs	r3, #1
 80067f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29b      	uxth	r3, r3
 8006802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680a:	b29a      	uxth	r2, r3
 800680c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	e2f1      	b.n	8006df8 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006814:	463b      	mov	r3, r7
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	78db      	ldrb	r3, [r3, #3]
 800681a:	2b02      	cmp	r3, #2
 800681c:	f040 818f 	bne.w	8006b3e <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d175      	bne.n	8006916 <USB_EPStartXfer+0x10a4>
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683a:	b29b      	uxth	r3, r3
 800683c:	461a      	mov	r2, r3
 800683e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006842:	4413      	add	r3, r2
 8006844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	00da      	lsls	r2, r3, #3
 8006850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006854:	4413      	add	r3, r2
 8006856:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800685a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800685e:	463b      	mov	r3, r7
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d116      	bne.n	8006896 <USB_EPStartXfer+0x1024>
 8006868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006874:	b29a      	uxth	r2, r3
 8006876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688c:	b29a      	uxth	r2, r3
 800688e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	e065      	b.n	8006962 <USB_EPStartXfer+0x10f0>
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b3e      	cmp	r3, #62	; 0x3e
 800689e:	d81a      	bhi.n	80068d6 <USB_EPStartXfer+0x1064>
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068ac:	463b      	mov	r3, r7
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <USB_EPStartXfer+0x1052>
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	3301      	adds	r3, #1
 80068c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	029b      	lsls	r3, r3, #10
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e045      	b.n	8006962 <USB_EPStartXfer+0x10f0>
 80068d6:	463b      	mov	r3, r7
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068e2:	463b      	mov	r3, r7
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <USB_EPStartXfer+0x1088>
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f4:	3b01      	subs	r3, #1
 80068f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29b      	uxth	r3, r3
 8006904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800690c:	b29a      	uxth	r2, r3
 800690e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	e025      	b.n	8006962 <USB_EPStartXfer+0x10f0>
 8006916:	463b      	mov	r3, r7
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	785b      	ldrb	r3, [r3, #1]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d120      	bne.n	8006962 <USB_EPStartXfer+0x10f0>
 8006920:	1d3b      	adds	r3, r7, #4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006930:	b29b      	uxth	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006938:	4413      	add	r3, r2
 800693a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	00da      	lsls	r2, r3, #3
 8006946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694a:	4413      	add	r3, r2
 800694c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	b29a      	uxth	r2, r3
 800695c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d175      	bne.n	8006a60 <USB_EPStartXfer+0x11ee>
 8006974:	1d3b      	adds	r3, r7, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800697c:	1d3b      	adds	r3, r7, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006984:	b29b      	uxth	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800698c:	4413      	add	r3, r2
 800698e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800699e:	4413      	add	r3, r2
 80069a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a8:	463b      	mov	r3, r7
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d116      	bne.n	80069e0 <USB_EPStartXfer+0x116e>
 80069b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e061      	b.n	8006aa4 <USB_EPStartXfer+0x1232>
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b3e      	cmp	r3, #62	; 0x3e
 80069e8:	d81a      	bhi.n	8006a20 <USB_EPStartXfer+0x11ae>
 80069ea:	463b      	mov	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069f6:	463b      	mov	r3, r7
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <USB_EPStartXfer+0x119c>
 8006a04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	029b      	lsls	r3, r3, #10
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e041      	b.n	8006aa4 <USB_EPStartXfer+0x1232>
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a2c:	463b      	mov	r3, r7
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <USB_EPStartXfer+0x11d2>
 8006a3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e021      	b.n	8006aa4 <USB_EPStartXfer+0x1232>
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d11c      	bne.n	8006aa4 <USB_EPStartXfer+0x1232>
 8006a6a:	1d3b      	adds	r3, r7, #4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	00da      	lsls	r2, r3, #3
 8006a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a96:	463b      	mov	r3, r7
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006aa2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 81a4 	beq.w	8006df8 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ab0:	1d3b      	adds	r3, r7, #4
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ac4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <USB_EPStartXfer+0x126a>
 8006ad0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10d      	bne.n	8006af8 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006adc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8187 	bne.w	8006df8 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8180 	bne.w	8006df8 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	463b      	mov	r3, r7
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006b16:	1d3b      	adds	r3, r7, #4
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8013      	strh	r3, [r2, #0]
 8006b3c:	e15c      	b.n	8006df8 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b3e:	463b      	mov	r3, r7
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	f040 8155 	bne.w	8006df4 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b4a:	463b      	mov	r3, r7
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699a      	ldr	r2, [r3, #24]
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d90e      	bls.n	8006b78 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006b64:	463b      	mov	r3, r7
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	619a      	str	r2, [r3, #24]
 8006b76:	e008      	b.n	8006b8a <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006b82:	463b      	mov	r3, r7
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b8a:	463b      	mov	r3, r7
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d16f      	bne.n	8006c74 <USB_EPStartXfer+0x1402>
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b9c:	1d3b      	adds	r3, r7, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bac:	4413      	add	r3, r2
 8006bae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	00da      	lsls	r2, r3, #3
 8006bba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d116      	bne.n	8006bfe <USB_EPStartXfer+0x138c>
 8006bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	e05f      	b.n	8006cbe <USB_EPStartXfer+0x144c>
 8006bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c02:	2b3e      	cmp	r3, #62	; 0x3e
 8006c04:	d818      	bhi.n	8006c38 <USB_EPStartXfer+0x13c6>
 8006c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <USB_EPStartXfer+0x13b4>
 8006c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c20:	3301      	adds	r3, #1
 8006c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	029b      	lsls	r3, r3, #10
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	e042      	b.n	8006cbe <USB_EPStartXfer+0x144c>
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d104      	bne.n	8006c58 <USB_EPStartXfer+0x13e6>
 8006c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c52:	3b01      	subs	r3, #1
 8006c54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	029b      	lsls	r3, r3, #10
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	e024      	b.n	8006cbe <USB_EPStartXfer+0x144c>
 8006c74:	463b      	mov	r3, r7
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d11f      	bne.n	8006cbe <USB_EPStartXfer+0x144c>
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c86:	1d3b      	adds	r3, r7, #4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c96:	4413      	add	r3, r2
 8006c98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	00da      	lsls	r2, r3, #3
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca8:	4413      	add	r3, r2
 8006caa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cbc:	801a      	strh	r2, [r3, #0]
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d16f      	bne.n	8006db0 <USB_EPStartXfer+0x153e>
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cd8:	1d3b      	adds	r3, r7, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	4413      	add	r3, r2
 8006cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	00da      	lsls	r2, r3, #3
 8006cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d116      	bne.n	8006d3a <USB_EPStartXfer+0x14c8>
 8006d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e05e      	b.n	8006df8 <USB_EPStartXfer+0x1586>
 8006d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d40:	d818      	bhi.n	8006d74 <USB_EPStartXfer+0x1502>
 8006d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_EPStartXfer+0x14f0>
 8006d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e041      	b.n	8006df8 <USB_EPStartXfer+0x1586>
 8006d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <USB_EPStartXfer+0x1522>
 8006d8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e023      	b.n	8006df8 <USB_EPStartXfer+0x1586>
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d11e      	bne.n	8006df8 <USB_EPStartXfer+0x1586>
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	00da      	lsls	r2, r3, #3
 8006dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ddc:	4413      	add	r3, r2
 8006dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	e001      	b.n	8006df8 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e02e      	b.n	8006e56 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	463b      	mov	r3, r7
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e16:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e22:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	463b      	mov	r3, r7
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d020      	beq.n	8006eb4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e88:	81bb      	strh	r3, [r7, #12]
 8006e8a:	89bb      	ldrh	r3, [r7, #12]
 8006e8c:	f083 0310 	eor.w	r3, r3, #16
 8006e90:	81bb      	strh	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	89bb      	ldrh	r3, [r7, #12]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
 8006eb2:	e01f      	b.n	8006ef4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	81fb      	strh	r3, [r7, #14]
 8006ecc:	89fb      	ldrh	r3, [r7, #14]
 8006ece:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ed2:	81fb      	strh	r3, [r7, #14]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	89fb      	ldrh	r3, [r7, #14]
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	7b1b      	ldrb	r3, [r3, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 809d 	bne.w	8007050 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d04c      	beq.n	8006fb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	823b      	strh	r3, [r7, #16]
 8006f2c:	8a3b      	ldrh	r3, [r7, #16]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01b      	beq.n	8006f6e <USB_EPClearStall+0x6c>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	81fb      	strh	r3, [r7, #14]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	89fb      	ldrh	r3, [r7, #14]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d06c      	beq.n	8007050 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8c:	81bb      	strh	r3, [r7, #12]
 8006f8e:	89bb      	ldrh	r3, [r7, #12]
 8006f90:	f083 0320 	eor.w	r3, r3, #32
 8006f94:	81bb      	strh	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	441a      	add	r2, r3
 8006fa0:	89bb      	ldrh	r3, [r7, #12]
 8006fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	8013      	strh	r3, [r2, #0]
 8006fb6:	e04b      	b.n	8007050 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	82fb      	strh	r3, [r7, #22]
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <USB_EPClearStall+0x106>
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe6:	82bb      	strh	r3, [r7, #20]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	8abb      	ldrh	r3, [r7, #20]
 8006ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007004:	b29b      	uxth	r3, r3
 8007006:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	827b      	strh	r3, [r7, #18]
 8007020:	8a7b      	ldrh	r3, [r7, #18]
 8007022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007026:	827b      	strh	r3, [r7, #18]
 8007028:	8a7b      	ldrh	r3, [r7, #18]
 800702a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800702e:	827b      	strh	r3, [r7, #18]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	8a7b      	ldrh	r3, [r7, #18]
 800703c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704c:	b29b      	uxth	r3, r3
 800704e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2280      	movs	r2, #128	; 0x80
 8007074:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b08d      	sub	sp, #52	; 0x34
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	4611      	mov	r1, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	460b      	mov	r3, r1
 80070e4:	80fb      	strh	r3, [r7, #6]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070ea:	88bb      	ldrh	r3, [r7, #4]
 80070ec:	3301      	adds	r3, #1
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800710a:	e01b      	b.n	8007144 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	3301      	adds	r3, #1
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	b29b      	uxth	r3, r3
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	b29b      	uxth	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	b29a      	uxth	r2, r3
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	3302      	adds	r3, #2
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	3301      	adds	r3, #1
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	3b01      	subs	r3, #1
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e0      	bne.n	800710c <USB_WritePMA+0x38>
  }
}
 800714a:	bf00      	nop
 800714c:	bf00      	nop
 800714e:	3734      	adds	r7, #52	; 0x34
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007158:	b480      	push	{r7}
 800715a:	b08b      	sub	sp, #44	; 0x2c
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4611      	mov	r1, r2
 8007164:	461a      	mov	r2, r3
 8007166:	460b      	mov	r3, r1
 8007168:	80fb      	strh	r3, [r7, #6]
 800716a:	4613      	mov	r3, r2
 800716c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800716e:	88bb      	ldrh	r3, [r7, #4]
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	b29b      	uxth	r3, r3
 8007174:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007188:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
 800718e:	e018      	b.n	80071c2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	3302      	adds	r3, #2
 800719c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3301      	adds	r3, #1
 80071ba:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	3b01      	subs	r3, #1
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e3      	bne.n	8007190 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071c8:	88bb      	ldrh	r3, [r7, #4]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	701a      	strb	r2, [r3, #0]
  }
}
 80071e4:	bf00      	nop
 80071e6:	372c      	adds	r7, #44	; 0x2c
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007200:	f002 f8e8 	bl	80093d4 <USBD_static_malloc>
 8007204:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007214:	2302      	movs	r3, #2
 8007216:	e066      	b.n	80072e6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7c1b      	ldrb	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d119      	bne.n	800725c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800722c:	2202      	movs	r2, #2
 800722e:	2181      	movs	r1, #129	; 0x81
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 ff74 	bl	800911e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800723c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007240:	2202      	movs	r2, #2
 8007242:	2101      	movs	r1, #1
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 ff6a 	bl	800911e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2210      	movs	r2, #16
 8007256:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800725a:	e016      	b.n	800728a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	2202      	movs	r2, #2
 8007260:	2181      	movs	r1, #129	; 0x81
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 ff5b 	bl	800911e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800726e:	2340      	movs	r3, #64	; 0x40
 8007270:	2202      	movs	r2, #2
 8007272:	2101      	movs	r1, #1
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 ff52 	bl	800911e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2210      	movs	r2, #16
 8007286:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800728a:	2308      	movs	r3, #8
 800728c:	2203      	movs	r2, #3
 800728e:	2182      	movs	r1, #130	; 0x82
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 ff44 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7c1b      	ldrb	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072ca:	2101      	movs	r1, #1
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f002 f816 	bl	80092fe <USBD_LL_PrepareReceive>
 80072d2:	e007      	b.n	80072e4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	2101      	movs	r1, #1
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 f80d 	bl	80092fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80072fa:	2181      	movs	r1, #129	; 0x81
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 ff34 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007308:	2101      	movs	r1, #1
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 ff2d 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007318:	2182      	movs	r1, #130	; 0x82
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 ff25 	bl	800916a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00e      	beq.n	8007358 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734a:	4618      	mov	r0, r3
 800734c:	f002 f850 	bl	80093f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007374:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	e0af      	b.n	80074ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007394:	2b00      	cmp	r3, #0
 8007396:	d03f      	beq.n	8007418 <USBD_CDC_Setup+0xb4>
 8007398:	2b20      	cmp	r3, #32
 800739a:	f040 809f 	bne.w	80074dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d02e      	beq.n	8007404 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da16      	bge.n	80073de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80073bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	88d2      	ldrh	r2, [r2, #6]
 80073c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	2b07      	cmp	r3, #7
 80073ca:	bf28      	it	cs
 80073cc:	2307      	movcs	r3, #7
 80073ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	89fa      	ldrh	r2, [r7, #14]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 facf 	bl	800897a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80073dc:	e085      	b.n	80074ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	785a      	ldrb	r2, [r3, #1]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	88db      	ldrh	r3, [r3, #6]
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80073f4:	6939      	ldr	r1, [r7, #16]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	88db      	ldrh	r3, [r3, #6]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fae8 	bl	80089d2 <USBD_CtlPrepareRx>
      break;
 8007402:	e072      	b.n	80074ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	7850      	ldrb	r0, [r2, #1]
 8007410:	2200      	movs	r2, #0
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	4798      	blx	r3
      break;
 8007416:	e068      	b.n	80074ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d852      	bhi.n	80074c6 <USBD_CDC_Setup+0x162>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBD_CDC_Setup+0xc4>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	08007459 	.word	0x08007459
 800742c:	080074d5 	.word	0x080074d5
 8007430:	080074c7 	.word	0x080074c7
 8007434:	080074c7 	.word	0x080074c7
 8007438:	080074c7 	.word	0x080074c7
 800743c:	080074c7 	.word	0x080074c7
 8007440:	080074c7 	.word	0x080074c7
 8007444:	080074c7 	.word	0x080074c7
 8007448:	080074c7 	.word	0x080074c7
 800744c:	080074c7 	.word	0x080074c7
 8007450:	08007483 	.word	0x08007483
 8007454:	080074ad 	.word	0x080074ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b03      	cmp	r3, #3
 8007462:	d107      	bne.n	8007474 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007464:	f107 030a 	add.w	r3, r7, #10
 8007468:	2202      	movs	r2, #2
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fa84 	bl	800897a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007472:	e032      	b.n	80074da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fa0e 	bl	8008898 <USBD_CtlError>
            ret = USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	75fb      	strb	r3, [r7, #23]
          break;
 8007480:	e02b      	b.n	80074da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d107      	bne.n	800749e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800748e:	f107 030d 	add.w	r3, r7, #13
 8007492:	2201      	movs	r2, #1
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 fa6f 	bl	800897a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800749c:	e01d      	b.n	80074da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 f9f9 	bl	8008898 <USBD_CtlError>
            ret = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	75fb      	strb	r3, [r7, #23]
          break;
 80074aa:	e016      	b.n	80074da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d00f      	beq.n	80074d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 f9ec 	bl	8008898 <USBD_CtlError>
            ret = USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074c4:	e008      	b.n	80074d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f9e5 	bl	8008898 <USBD_CtlError>
          ret = USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	75fb      	strb	r3, [r7, #23]
          break;
 80074d2:	e002      	b.n	80074da <USBD_CDC_Setup+0x176>
          break;
 80074d4:	bf00      	nop
 80074d6:	e008      	b.n	80074ea <USBD_CDC_Setup+0x186>
          break;
 80074d8:	bf00      	nop
      }
      break;
 80074da:	e006      	b.n	80074ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 f9da 	bl	8008898 <USBD_CtlError>
      ret = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007506:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	e04f      	b.n	80075b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800751c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	3318      	adds	r3, #24
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d029      	beq.n	8007588 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3318      	adds	r3, #24
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	78f9      	ldrb	r1, [r7, #3]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	460b      	mov	r3, r1
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4403      	add	r3, r0
 8007554:	3338      	adds	r3, #56	; 0x38
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	fbb2 f1f3 	udiv	r1, r2, r3
 800755c:	fb03 f301 	mul.w	r3, r3, r1
 8007560:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007562:	2b00      	cmp	r3, #0
 8007564:	d110      	bne.n	8007588 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	3318      	adds	r3, #24
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800757a:	78f9      	ldrb	r1, [r7, #3]
 800757c:	2300      	movs	r3, #0
 800757e:	2200      	movs	r2, #0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fe9b 	bl	80092bc <USBD_LL_Transmit>
 8007586:	e015      	b.n	80075b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e015      	b.n	800760c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 feab 	bl	8009340 <USBD_LL_GetRxDataSize>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007606:	4611      	mov	r1, r2
 8007608:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007622:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	e01b      	b.n	8007666 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <USBD_CDC_EP0_RxReady+0x50>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d010      	beq.n	8007664 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007650:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007658:	b292      	uxth	r2, r2
 800765a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	22ff      	movs	r2, #255	; 0xff
 8007660:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2243      	movs	r2, #67	; 0x43
 800767c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800767e:	4b03      	ldr	r3, [pc, #12]	; (800768c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000094 	.word	0x20000094

08007690 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2243      	movs	r2, #67	; 0x43
 800769c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20000050 	.word	0x20000050

080076b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2243      	movs	r2, #67	; 0x43
 80076bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	200000d8 	.word	0x200000d8

080076d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	220a      	movs	r2, #10
 80076dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076de:	4b03      	ldr	r3, [pc, #12]	; (80076ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	2000000c 	.word	0x2000000c

080076f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	e004      	b.n	800770e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800771a:	b480      	push	{r7}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800772c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	e008      	b.n	800774a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007766:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	e004      	b.n	800777c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007796:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e01a      	b.n	80077e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d114      	bne.n	80077de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80077d2:	2181      	movs	r1, #129	; 0x81
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fd71 	bl	80092bc <USBD_LL_Transmit>

    ret = USBD_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e016      	b.n	8007834 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 fd6f 	bl	80092fe <USBD_LL_PrepareReceive>
 8007820:	e007      	b.n	8007832 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007828:	2340      	movs	r3, #64	; 0x40
 800782a:	2101      	movs	r1, #1
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fd66 	bl	80092fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	e01f      	b.n	8007894 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	79fa      	ldrb	r2, [r7, #7]
 8007886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f001 fbcd 	bl	8009028 <USBD_LL_Init>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007892:	7dfb      	ldrb	r3, [r7, #23]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e016      	b.n	80078e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	f107 020e 	add.w	r2, r7, #14
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	4602      	mov	r2, r0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 fbf8 	bl	80090e8 <USBD_LL_Start>
 80078f8:	4603      	mov	r3, r0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007924:	2303      	movs	r3, #3
 8007926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	78fa      	ldrb	r2, [r7, #3]
 800793c:	4611      	mov	r1, r2
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	4611      	mov	r1, r2
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
  }

  return USBD_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 ff46 	bl	8008824 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d01a      	beq.n	80079f2 <USBD_LL_SetupStage+0x72>
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d822      	bhi.n	8007a06 <USBD_LL_SetupStage+0x86>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <USBD_LL_SetupStage+0x4a>
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d00a      	beq.n	80079de <USBD_LL_SetupStage+0x5e>
 80079c8:	e01d      	b.n	8007a06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9ee 	bl	8007db4 <USBD_StdDevReq>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e020      	b.n	8007a20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa52 	bl	8007e90 <USBD_StdItfReq>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	e016      	b.n	8007a20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa91 	bl	8007f22 <USBD_StdEPReq>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
      break;
 8007a04:	e00c      	b.n	8007a20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 fbc7 	bl	80091a8 <USBD_LL_StallEP>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1e:	bf00      	nop
  }

  return ret;
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	460b      	mov	r3, r1
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d138      	bne.n	8007ab0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d14a      	bne.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d913      	bls.n	8007a84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	1ad2      	subs	r2, r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	4293      	cmp	r3, r2
 8007a74:	bf28      	it	cs
 8007a76:	4613      	movcs	r3, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 ffc5 	bl	8008a0c <USBD_CtlContinueRx>
 8007a82:	e030      	b.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d10b      	bne.n	8007aa8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 ffc0 	bl	8008a2e <USBD_CtlSendStatus>
 8007aae:	e01a      	b.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d114      	bne.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00e      	beq.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	7afa      	ldrb	r2, [r7, #11]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	4798      	blx	r3
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	e000      	b.n	8007ae8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	460b      	mov	r3, r1
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d16b      	bne.n	8007bdc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3314      	adds	r3, #20
 8007b08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d156      	bne.n	8007bc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d914      	bls.n	8007b4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	1ad2      	subs	r2, r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 ff3a 	bl	80089b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fbdb 	bl	80092fe <USBD_LL_PrepareReceive>
 8007b48:	e03b      	b.n	8007bc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d11c      	bne.n	8007b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	685a      	ldr	r2, [r3, #4]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d316      	bcc.n	8007b90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d20f      	bcs.n	8007b90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b70:	2200      	movs	r2, #0
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 ff1b 	bl	80089b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b82:	2300      	movs	r3, #0
 8007b84:	2200      	movs	r2, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f001 fbb8 	bl	80092fe <USBD_LL_PrepareReceive>
 8007b8e:	e018      	b.n	8007bc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d10b      	bne.n	8007bb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb4:	2180      	movs	r1, #128	; 0x80
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f001 faf6 	bl	80091a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 ff49 	bl	8008a54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d122      	bne.n	8007c12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fe98 	bl	8007902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bda:	e01a      	b.n	8007c12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d114      	bne.n	8007c12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	7afa      	ldrb	r2, [r7, #11]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	e000      	b.n	8007c14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e02f      	b.n	8007cb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6852      	ldr	r2, [r2, #4]
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	4611      	mov	r1, r2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c7a:	2340      	movs	r3, #64	; 0x40
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fa4c 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2240      	movs	r2, #64	; 0x40
 8007c92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c96:	2340      	movs	r3, #64	; 0x40
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fa3e 	bl	800911e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2240      	movs	r2, #64	; 0x40
 8007cac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b04      	cmp	r3, #4
 8007d16:	d106      	bne.n	8007d26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e012      	b.n	8007d70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d10b      	bne.n	8007d6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d96:	8a3b      	ldrh	r3, [r7, #16]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b21a      	sxth	r2, r3
 8007d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007da6:	89fb      	ldrh	r3, [r7, #14]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	d005      	beq.n	8007dda <USBD_StdDevReq+0x26>
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	d853      	bhi.n	8007e7a <USBD_StdDevReq+0xc6>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <USBD_StdDevReq+0x3a>
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d14f      	bne.n	8007e7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	4798      	blx	r3
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
      break;
 8007dec:	e04a      	b.n	8007e84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d83b      	bhi.n	8007e6e <USBD_StdDevReq+0xba>
 8007df6:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <USBD_StdDevReq+0x48>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007e65 	.word	0x08007e65
 8007e04:	08007e6f 	.word	0x08007e6f
 8007e08:	08007e5b 	.word	0x08007e5b
 8007e0c:	08007e6f 	.word	0x08007e6f
 8007e10:	08007e2f 	.word	0x08007e2f
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e6f 	.word	0x08007e6f
 8007e1c:	08007e47 	.word	0x08007e47
 8007e20:	08007e39 	.word	0x08007e39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9de 	bl	80081e8 <USBD_GetDescriptor>
          break;
 8007e2c:	e024      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fb6d 	bl	8008510 <USBD_SetAddress>
          break;
 8007e36:	e01f      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fbac 	bl	8008598 <USBD_SetConfig>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
          break;
 8007e44:	e018      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc4b 	bl	80086e4 <USBD_GetConfig>
          break;
 8007e4e:	e013      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fc7c 	bl	8008750 <USBD_GetStatus>
          break;
 8007e58:	e00e      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fcab 	bl	80087b8 <USBD_SetFeature>
          break;
 8007e62:	e009      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fcba 	bl	80087e0 <USBD_ClrFeature>
          break;
 8007e6c:	e004      	b.n	8007e78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd11 	bl	8008898 <USBD_CtlError>
          break;
 8007e76:	bf00      	nop
      }
      break;
 8007e78:	e004      	b.n	8007e84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fd0b 	bl	8008898 <USBD_CtlError>
      break;
 8007e82:	bf00      	nop
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop

08007e90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d005      	beq.n	8007eb6 <USBD_StdItfReq+0x26>
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d82f      	bhi.n	8007f0e <USBD_StdItfReq+0x7e>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <USBD_StdItfReq+0x26>
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d12b      	bne.n	8007f0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d81d      	bhi.n	8007f00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	889b      	ldrh	r3, [r3, #4]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d813      	bhi.n	8007ef6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	88db      	ldrh	r3, [r3, #6]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d110      	bne.n	8007f0a <USBD_StdItfReq+0x7a>
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fd9d 	bl	8008a2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ef4:	e009      	b.n	8007f0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fccd 	bl	8008898 <USBD_CtlError>
          break;
 8007efe:	e004      	b.n	8007f0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fcc8 	bl	8008898 <USBD_CtlError>
          break;
 8007f08:	e000      	b.n	8007f0c <USBD_StdItfReq+0x7c>
          break;
 8007f0a:	bf00      	nop
      }
      break;
 8007f0c:	e004      	b.n	8007f18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fcc1 	bl	8008898 <USBD_CtlError>
      break;
 8007f16:	bf00      	nop
  }

  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	889b      	ldrh	r3, [r3, #4]
 8007f34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d007      	beq.n	8007f52 <USBD_StdEPReq+0x30>
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	f200 8145 	bhi.w	80081d2 <USBD_StdEPReq+0x2b0>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <USBD_StdEPReq+0x44>
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	f040 8140 	bne.w	80081d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e13a      	b.n	80081dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d007      	beq.n	8007f7e <USBD_StdEPReq+0x5c>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	f300 8129 	bgt.w	80081c6 <USBD_StdEPReq+0x2a4>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d07f      	beq.n	8008078 <USBD_StdEPReq+0x156>
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d03c      	beq.n	8007ff6 <USBD_StdEPReq+0xd4>
 8007f7c:	e123      	b.n	80081c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d002      	beq.n	8007f90 <USBD_StdEPReq+0x6e>
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d016      	beq.n	8007fbc <USBD_StdEPReq+0x9a>
 8007f8e:	e02c      	b.n	8007fea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00d      	beq.n	8007fb2 <USBD_StdEPReq+0x90>
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d00a      	beq.n	8007fb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 f901 	bl	80091a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa6:	2180      	movs	r1, #128	; 0x80
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f8fd 	bl	80091a8 <USBD_LL_StallEP>
 8007fae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fb0:	e020      	b.n	8007ff4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc6f 	bl	8008898 <USBD_CtlError>
              break;
 8007fba:	e01b      	b.n	8007ff4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	885b      	ldrh	r3, [r3, #2]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10e      	bne.n	8007fe2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <USBD_StdEPReq+0xc0>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b80      	cmp	r3, #128	; 0x80
 8007fce:	d008      	beq.n	8007fe2 <USBD_StdEPReq+0xc0>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	88db      	ldrh	r3, [r3, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f8e3 	bl	80091a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fd23 	bl	8008a2e <USBD_CtlSendStatus>

              break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc53 	bl	8008898 <USBD_CtlError>
              break;
 8007ff2:	bf00      	nop
          }
          break;
 8007ff4:	e0ec      	b.n	80081d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d002      	beq.n	8008008 <USBD_StdEPReq+0xe6>
 8008002:	2b03      	cmp	r3, #3
 8008004:	d016      	beq.n	8008034 <USBD_StdEPReq+0x112>
 8008006:	e030      	b.n	800806a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00d      	beq.n	800802a <USBD_StdEPReq+0x108>
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b80      	cmp	r3, #128	; 0x80
 8008012:	d00a      	beq.n	800802a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f8c5 	bl	80091a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800801e:	2180      	movs	r1, #128	; 0x80
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 f8c1 	bl	80091a8 <USBD_LL_StallEP>
 8008026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008028:	e025      	b.n	8008076 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fc33 	bl	8008898 <USBD_CtlError>
              break;
 8008032:	e020      	b.n	8008076 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	885b      	ldrh	r3, [r3, #2]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d11b      	bne.n	8008074 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f8cb 	bl	80091e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fcec 	bl	8008a2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	4798      	blx	r3
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008068:	e004      	b.n	8008074 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fc13 	bl	8008898 <USBD_CtlError>
              break;
 8008072:	e000      	b.n	8008076 <USBD_StdEPReq+0x154>
              break;
 8008074:	bf00      	nop
          }
          break;
 8008076:	e0ab      	b.n	80081d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0x168>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d032      	beq.n	80080ee <USBD_StdEPReq+0x1cc>
 8008088:	e097      	b.n	80081ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <USBD_StdEPReq+0x17e>
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d004      	beq.n	80080a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fbfd 	bl	8008898 <USBD_CtlError>
                break;
 800809e:	e091      	b.n	80081c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da0b      	bge.n	80080c0 <USBD_StdEPReq+0x19e>
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	3310      	adds	r3, #16
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	3304      	adds	r3, #4
 80080be:	e00b      	b.n	80080d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4413      	add	r3, r2
 80080d6:	3304      	adds	r3, #4
 80080d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2202      	movs	r2, #2
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fc47 	bl	800897a <USBD_CtlSendData>
              break;
 80080ec:	e06a      	b.n	80081c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da11      	bge.n	800811a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	f003 020f 	and.w	r2, r3, #15
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	3324      	adds	r3, #36	; 0x24
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d117      	bne.n	8008140 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbc0 	bl	8008898 <USBD_CtlError>
                  break;
 8008118:	e054      	b.n	80081c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	f003 020f 	and.w	r2, r3, #15
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fbad 	bl	8008898 <USBD_CtlError>
                  break;
 800813e:	e041      	b.n	80081c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da0b      	bge.n	8008160 <USBD_StdEPReq+0x23e>
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	3310      	adds	r3, #16
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	3304      	adds	r3, #4
 800815e:	e00b      	b.n	8008178 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <USBD_StdEPReq+0x264>
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b80      	cmp	r3, #128	; 0x80
 8008184:	d103      	bne.n	800818e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	e00e      	b.n	80081ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 f846 	bl	8009224 <USBD_LL_IsStallEP>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2201      	movs	r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e002      	b.n	80081ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2202      	movs	r2, #2
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fbe1 	bl	800897a <USBD_CtlSendData>
              break;
 80081b8:	e004      	b.n	80081c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fb6b 	bl	8008898 <USBD_CtlError>
              break;
 80081c2:	bf00      	nop
          }
          break;
 80081c4:	e004      	b.n	80081d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb65 	bl	8008898 <USBD_CtlError>
          break;
 80081ce:	bf00      	nop
      }
      break;
 80081d0:	e004      	b.n	80081dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fb5f 	bl	8008898 <USBD_CtlError>
      break;
 80081da:	bf00      	nop
  }

  return ret;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	0a1b      	lsrs	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	2b0e      	cmp	r3, #14
 800820a:	f200 8152 	bhi.w	80084b2 <USBD_GetDescriptor+0x2ca>
 800820e:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <USBD_GetDescriptor+0x2c>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	08008285 	.word	0x08008285
 8008218:	0800829d 	.word	0x0800829d
 800821c:	080082dd 	.word	0x080082dd
 8008220:	080084b3 	.word	0x080084b3
 8008224:	080084b3 	.word	0x080084b3
 8008228:	08008453 	.word	0x08008453
 800822c:	0800847f 	.word	0x0800847f
 8008230:	080084b3 	.word	0x080084b3
 8008234:	080084b3 	.word	0x080084b3
 8008238:	080084b3 	.word	0x080084b3
 800823c:	080084b3 	.word	0x080084b3
 8008240:	080084b3 	.word	0x080084b3
 8008244:	080084b3 	.word	0x080084b3
 8008248:	080084b3 	.word	0x080084b3
 800824c:	08008251 	.word	0x08008251
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008272:	e126      	b.n	80084c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fb0e 	bl	8008898 <USBD_CtlError>
        err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
      break;
 8008282:	e11e      	b.n	80084c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7c12      	ldrb	r2, [r2, #16]
 8008290:	f107 0108 	add.w	r1, r7, #8
 8008294:	4610      	mov	r0, r2
 8008296:	4798      	blx	r3
 8008298:	60f8      	str	r0, [r7, #12]
      break;
 800829a:	e112      	b.n	80084c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7c1b      	ldrb	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10d      	bne.n	80082c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f107 0208 	add.w	r2, r7, #8
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
 80082b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	2202      	movs	r2, #2
 80082bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082be:	e100      	b.n	80084c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	f107 0208 	add.w	r2, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	2202      	movs	r2, #2
 80082d8:	701a      	strb	r2, [r3, #0]
      break;
 80082da:	e0f2      	b.n	80084c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b05      	cmp	r3, #5
 80082e4:	f200 80ac 	bhi.w	8008440 <USBD_GetDescriptor+0x258>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USBD_GetDescriptor+0x108>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008309 	.word	0x08008309
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	08008371 	.word	0x08008371
 80082fc:	080083a5 	.word	0x080083a5
 8008300:	080083d9 	.word	0x080083d9
 8008304:	0800840d 	.word	0x0800840d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00b      	beq.n	800832c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	7c12      	ldrb	r2, [r2, #16]
 8008320:	f107 0108 	add.w	r1, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832a:	e091      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fab2 	bl	8008898 <USBD_CtlError>
            err++;
 8008334:	7afb      	ldrb	r3, [r7, #11]
 8008336:	3301      	adds	r3, #1
 8008338:	72fb      	strb	r3, [r7, #11]
          break;
 800833a:	e089      	b.n	8008450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	7c12      	ldrb	r2, [r2, #16]
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835e:	e077      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fa98 	bl	8008898 <USBD_CtlError>
            err++;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	3301      	adds	r3, #1
 800836c:	72fb      	strb	r3, [r7, #11]
          break;
 800836e:	e06f      	b.n	8008450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008392:	e05d      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa7e 	bl	8008898 <USBD_CtlError>
            err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
          break;
 80083a2:	e055      	b.n	8008450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e043      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa64 	bl	8008898 <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e03b      	b.n	8008450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e029      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa4a 	bl	8008898 <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e021      	b.n	8008450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e00f      	b.n	8008450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa30 	bl	8008898 <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e007      	b.n	8008450 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa28 	bl	8008898 <USBD_CtlError>
          err++;
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	3301      	adds	r3, #1
 800844c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800844e:	bf00      	nop
      }
      break;
 8008450:	e037      	b.n	80084c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7c1b      	ldrb	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	f107 0208 	add.w	r2, r7, #8
 8008466:	4610      	mov	r0, r2
 8008468:	4798      	blx	r3
 800846a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800846c:	e029      	b.n	80084c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa11 	bl	8008898 <USBD_CtlError>
        err++;
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	3301      	adds	r3, #1
 800847a:	72fb      	strb	r3, [r7, #11]
      break;
 800847c:	e021      	b.n	80084c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7c1b      	ldrb	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	f107 0208 	add.w	r2, r7, #8
 8008492:	4610      	mov	r0, r2
 8008494:	4798      	blx	r3
 8008496:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	2207      	movs	r2, #7
 800849e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a0:	e00f      	b.n	80084c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9f7 	bl	8008898 <USBD_CtlError>
        err++;
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	3301      	adds	r3, #1
 80084ae:	72fb      	strb	r3, [r7, #11]
      break;
 80084b0:	e007      	b.n	80084c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9ef 	bl	8008898 <USBD_CtlError>
      err++;
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	3301      	adds	r3, #1
 80084be:	72fb      	strb	r3, [r7, #11]
      break;
 80084c0:	bf00      	nop
  }

  if (err != 0U)
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11e      	bne.n	8008506 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	88db      	ldrh	r3, [r3, #6]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d016      	beq.n	80084fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80084d0:	893b      	ldrh	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88da      	ldrh	r2, [r3, #6]
 80084da:	893b      	ldrh	r3, [r7, #8]
 80084dc:	4293      	cmp	r3, r2
 80084de:	bf28      	it	cs
 80084e0:	4613      	movcs	r3, r2
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084e6:	893b      	ldrh	r3, [r7, #8]
 80084e8:	461a      	mov	r2, r3
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa44 	bl	800897a <USBD_CtlSendData>
 80084f2:	e009      	b.n	8008508 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9ce 	bl	8008898 <USBD_CtlError>
 80084fc:	e004      	b.n	8008508 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa95 	bl	8008a2e <USBD_CtlSendStatus>
 8008504:	e000      	b.n	8008508 <USBD_GetDescriptor+0x320>
    return;
 8008506:	bf00      	nop
  }
}
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	889b      	ldrh	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d131      	bne.n	8008586 <USBD_SetAddress+0x76>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	88db      	ldrh	r3, [r3, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d12d      	bne.n	8008586 <USBD_SetAddress+0x76>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	2b7f      	cmp	r3, #127	; 0x7f
 8008530:	d829      	bhi.n	8008586 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800853c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b03      	cmp	r3, #3
 8008548:	d104      	bne.n	8008554 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9a3 	bl	8008898 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	e01d      	b.n	8008590 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7bfa      	ldrb	r2, [r7, #15]
 8008558:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fe8c 	bl	800927e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa61 	bl	8008a2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	e009      	b.n	8008590 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	e004      	b.n	8008590 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f985 	bl	8008898 <USBD_CtlError>
  }
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	885b      	ldrh	r3, [r3, #2]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	4b4c      	ldr	r3, [pc, #304]	; (80086e0 <USBD_SetConfig+0x148>)
 80085ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085b0:	4b4b      	ldr	r3, [pc, #300]	; (80086e0 <USBD_SetConfig+0x148>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d905      	bls.n	80085c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f96c 	bl	8008898 <USBD_CtlError>
    return USBD_FAIL;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e088      	b.n	80086d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d002      	beq.n	80085d6 <USBD_SetConfig+0x3e>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d025      	beq.n	8008620 <USBD_SetConfig+0x88>
 80085d4:	e071      	b.n	80086ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085d6:	4b42      	ldr	r3, [pc, #264]	; (80086e0 <USBD_SetConfig+0x148>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01c      	beq.n	8008618 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80085de:	4b40      	ldr	r3, [pc, #256]	; (80086e0 <USBD_SetConfig+0x148>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085e8:	4b3d      	ldr	r3, [pc, #244]	; (80086e0 <USBD_SetConfig+0x148>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff f992 	bl	8007918 <USBD_SetClassConfig>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f949 	bl	8008898 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008606:	e065      	b.n	80086d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fa10 	bl	8008a2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2203      	movs	r2, #3
 8008612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008616:	e05d      	b.n	80086d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa08 	bl	8008a2e <USBD_CtlSendStatus>
      break;
 800861e:	e059      	b.n	80086d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008620:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <USBD_SetConfig+0x148>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d112      	bne.n	800864e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008630:	4b2b      	ldr	r3, [pc, #172]	; (80086e0 <USBD_SetConfig+0x148>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <USBD_SetConfig+0x148>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff f985 	bl	8007950 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9f1 	bl	8008a2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800864c:	e042      	b.n	80086d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800864e:	4b24      	ldr	r3, [pc, #144]	; (80086e0 <USBD_SetConfig+0x148>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d02a      	beq.n	80086b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff f973 	bl	8007950 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800866a:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <USBD_SetConfig+0x148>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008674:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <USBD_SetConfig+0x148>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff f94c 	bl	8007918 <USBD_SetClassConfig>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00f      	beq.n	80086aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f903 	bl	8008898 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff f958 	bl	8007950 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086a8:	e014      	b.n	80086d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9bf 	bl	8008a2e <USBD_CtlSendStatus>
      break;
 80086b0:	e010      	b.n	80086d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9bb 	bl	8008a2e <USBD_CtlSendStatus>
      break;
 80086b8:	e00c      	b.n	80086d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f8eb 	bl	8008898 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <USBD_SetConfig+0x148>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff f941 	bl	8007950 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086ce:	2303      	movs	r3, #3
 80086d0:	73fb      	strb	r3, [r7, #15]
      break;
 80086d2:	bf00      	nop
  }

  return ret;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200001a0 	.word	0x200001a0

080086e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	88db      	ldrh	r3, [r3, #6]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d004      	beq.n	8008700 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f8cd 	bl	8008898 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086fe:	e023      	b.n	8008748 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b02      	cmp	r3, #2
 800870a:	dc02      	bgt.n	8008712 <USBD_GetConfig+0x2e>
 800870c:	2b00      	cmp	r3, #0
 800870e:	dc03      	bgt.n	8008718 <USBD_GetConfig+0x34>
 8008710:	e015      	b.n	800873e <USBD_GetConfig+0x5a>
 8008712:	2b03      	cmp	r3, #3
 8008714:	d00b      	beq.n	800872e <USBD_GetConfig+0x4a>
 8008716:	e012      	b.n	800873e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3308      	adds	r3, #8
 8008722:	2201      	movs	r2, #1
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f927 	bl	800897a <USBD_CtlSendData>
        break;
 800872c:	e00c      	b.n	8008748 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3304      	adds	r3, #4
 8008732:	2201      	movs	r2, #1
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f91f 	bl	800897a <USBD_CtlSendData>
        break;
 800873c:	e004      	b.n	8008748 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8a9 	bl	8008898 <USBD_CtlError>
        break;
 8008746:	bf00      	nop
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	2b02      	cmp	r3, #2
 8008766:	d81e      	bhi.n	80087a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	88db      	ldrh	r3, [r3, #6]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d004      	beq.n	800877a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f890 	bl	8008898 <USBD_CtlError>
        break;
 8008778:	e01a      	b.n	80087b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f043 0202 	orr.w	r2, r3, #2
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	330c      	adds	r3, #12
 800879a:	2202      	movs	r2, #2
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f8eb 	bl	800897a <USBD_CtlSendData>
      break;
 80087a4:	e004      	b.n	80087b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f875 	bl	8008898 <USBD_CtlError>
      break;
 80087ae:	bf00      	nop
  }
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	885b      	ldrh	r3, [r3, #2]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d106      	bne.n	80087d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f92b 	bl	8008a2e <USBD_CtlSendStatus>
  }
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d80b      	bhi.n	8008810 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	885b      	ldrh	r3, [r3, #2]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d10c      	bne.n	800881a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f910 	bl	8008a2e <USBD_CtlSendStatus>
      }
      break;
 800880e:	e004      	b.n	800881a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f840 	bl	8008898 <USBD_CtlError>
      break;
 8008818:	e000      	b.n	800881c <USBD_ClrFeature+0x3c>
      break;
 800881a:	bf00      	nop
  }
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	781a      	ldrb	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff fa92 	bl	8007d78 <SWAPBYTE>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fa85 	bl	8007d78 <SWAPBYTE>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fa78 	bl	8007d78 <SWAPBYTE>
 8008888:	4603      	mov	r3, r0
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	80da      	strh	r2, [r3, #6]
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088a2:	2180      	movs	r1, #128	; 0x80
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc7f 	bl	80091a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fc7b 	bl	80091a8 <USBD_LL_StallEP>
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d036      	beq.n	800893e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088d4:	6938      	ldr	r0, [r7, #16]
 80088d6:	f000 f836 	bl	8008946 <USBD_GetLen>
 80088da:	4603      	mov	r3, r0
 80088dc:	3301      	adds	r3, #1
 80088de:	b29b      	uxth	r3, r3
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	3301      	adds	r3, #1
 80088f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4413      	add	r3, r2
 8008900:	2203      	movs	r2, #3
 8008902:	701a      	strb	r2, [r3, #0]
  idx++;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	3301      	adds	r3, #1
 8008908:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800890a:	e013      	b.n	8008934 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4413      	add	r3, r2
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	3301      	adds	r3, #1
 800891c:	613b      	str	r3, [r7, #16]
    idx++;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	3301      	adds	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
    idx++;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	3301      	adds	r3, #1
 8008932:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e7      	bne.n	800890c <USBD_GetString+0x52>
 800893c:	e000      	b.n	8008940 <USBD_GetString+0x86>
    return;
 800893e:	bf00      	nop
  }
}
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008956:	e005      	b.n	8008964 <USBD_GetLen+0x1e>
  {
    len++;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	3301      	adds	r3, #1
 800895c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3301      	adds	r3, #1
 8008962:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f5      	bne.n	8008958 <USBD_GetLen+0x12>
  }

  return len;
 800896c:	7bfb      	ldrb	r3, [r7, #15]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2202      	movs	r2, #2
 800898a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	2100      	movs	r1, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fc8b 	bl	80092bc <USBD_LL_Transmit>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fc7a 	bl	80092bc <USBD_LL_Transmit>

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2203      	movs	r2, #3
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	2100      	movs	r1, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fc7e 	bl	80092fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fc6d 	bl	80092fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc39 	bl	80092bc <USBD_LL_Transmit>

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2205      	movs	r2, #5
 8008a60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a64:	2300      	movs	r3, #0
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc47 	bl	80092fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008a80:	2200      	movs	r2, #0
 8008a82:	4912      	ldr	r1, [pc, #72]	; (8008acc <MX_USB_Device_Init+0x50>)
 8008a84:	4812      	ldr	r0, [pc, #72]	; (8008ad0 <MX_USB_Device_Init+0x54>)
 8008a86:	f7fe fed9 	bl	800783c <USBD_Init>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008a90:	f7f7 fe22 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008a94:	490f      	ldr	r1, [pc, #60]	; (8008ad4 <MX_USB_Device_Init+0x58>)
 8008a96:	480e      	ldr	r0, [pc, #56]	; (8008ad0 <MX_USB_Device_Init+0x54>)
 8008a98:	f7fe ff00 	bl	800789c <USBD_RegisterClass>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008aa2:	f7f7 fe19 	bl	80006d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008aa6:	490c      	ldr	r1, [pc, #48]	; (8008ad8 <MX_USB_Device_Init+0x5c>)
 8008aa8:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <MX_USB_Device_Init+0x54>)
 8008aaa:	f7fe fe21 	bl	80076f0 <USBD_CDC_RegisterInterface>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008ab4:	f7f7 fe10 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <MX_USB_Device_Init+0x54>)
 8008aba:	f7fe ff16 	bl	80078ea <USBD_Start>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008ac4:	f7f7 fe08 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000130 	.word	0x20000130
 8008ad0:	200004bc 	.word	0x200004bc
 8008ad4:	20000018 	.word	0x20000018
 8008ad8:	2000011c 	.word	0x2000011c

08008adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4905      	ldr	r1, [pc, #20]	; (8008af8 <CDC_Init_FS+0x1c>)
 8008ae4:	4805      	ldr	r0, [pc, #20]	; (8008afc <CDC_Init_FS+0x20>)
 8008ae6:	f7fe fe18 	bl	800771a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008aea:	4905      	ldr	r1, [pc, #20]	; (8008b00 <CDC_Init_FS+0x24>)
 8008aec:	4803      	ldr	r0, [pc, #12]	; (8008afc <CDC_Init_FS+0x20>)
 8008aee:	f7fe fe32 	bl	8007756 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000b74 	.word	0x20000b74
 8008afc:	200004bc 	.word	0x200004bc
 8008b00:	2000078c 	.word	0x2000078c

08008b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b23      	cmp	r3, #35	; 0x23
 8008b28:	d84a      	bhi.n	8008bc0 <CDC_Control_FS+0xac>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <CDC_Control_FS+0x1c>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008bc1 	.word	0x08008bc1
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008bc1 	.word	0x08008bc1
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008bc1 	.word	0x08008bc1
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bc1 	.word	0x08008bc1
 8008b50:	08008bc1 	.word	0x08008bc1
 8008b54:	08008bc1 	.word	0x08008bc1
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008bc1 	.word	0x08008bc1
 8008b60:	08008bc1 	.word	0x08008bc1
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bc1 	.word	0x08008bc1
 8008b70:	08008bc1 	.word	0x08008bc1
 8008b74:	08008bc1 	.word	0x08008bc1
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bc1 	.word	0x08008bc1
 8008b88:	08008bc1 	.word	0x08008bc1
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008bc1 	.word	0x08008bc1
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	08008bc1 	.word	0x08008bc1
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc1 	.word	0x08008bc1
 8008bb4:	08008bc1 	.word	0x08008bc1
 8008bb8:	08008bc1 	.word	0x08008bc1
 8008bbc:	08008bc1 	.word	0x08008bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bc0:	bf00      	nop
  }

  return (USBD_OK);
 8008bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008bde:	f7fe fdba 	bl	8007756 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008be2:	4804      	ldr	r0, [pc, #16]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008be4:	f7fe fe00 	bl	80077e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200004bc 	.word	0x200004bc

08008bf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00b      	b.n	8008c36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	4806      	ldr	r0, [pc, #24]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c26:	f7fe fd78 	bl	800771a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c2c:	f7fe fdac 	bl	8007788 <USBD_CDC_TransmitPacket>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200004bc 	.word	0x200004bc

08008c44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2212      	movs	r2, #18
 8008c78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000150 	.word	0x20000150

08008c8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c9e:	4b03      	ldr	r3, [pc, #12]	; (8008cac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20000164 	.word	0x20000164

08008cb0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d105      	bne.n	8008cce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4907      	ldr	r1, [pc, #28]	; (8008ce4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cc6:	4808      	ldr	r0, [pc, #32]	; (8008ce8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cc8:	f7ff fdf7 	bl	80088ba <USBD_GetString>
 8008ccc:	e004      	b.n	8008cd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cd2:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cd4:	f7ff fdf1 	bl	80088ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000f5c 	.word	0x20000f5c
 8008ce8:	080094e0 	.word	0x080094e0

08008cec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008cfc:	4804      	ldr	r0, [pc, #16]	; (8008d10 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008cfe:	f7ff fddc 	bl	80088ba <USBD_GetString>
  return USBD_StrDesc;
 8008d02:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000f5c 	.word	0x20000f5c
 8008d10:	080094f8 	.word	0x080094f8

08008d14 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	221a      	movs	r2, #26
 8008d24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d26:	f000 f843 	bl	8008db0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000168 	.word	0x20000168

08008d38 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4907      	ldr	r1, [pc, #28]	; (8008d6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d50:	f7ff fdb3 	bl	80088ba <USBD_GetString>
 8008d54:	e004      	b.n	8008d60 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	4904      	ldr	r1, [pc, #16]	; (8008d6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d5a:	4805      	ldr	r0, [pc, #20]	; (8008d70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d5c:	f7ff fdad 	bl	80088ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000f5c 	.word	0x20000f5c
 8008d70:	0800950c 	.word	0x0800950c

08008d74 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d8c:	f7ff fd95 	bl	80088ba <USBD_GetString>
 8008d90:	e004      	b.n	8008d9c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d98:	f7ff fd8f 	bl	80088ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000f5c 	.word	0x20000f5c
 8008dac:	08009518 	.word	0x08009518

08008db0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <Get_SerialNum+0x44>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <Get_SerialNum+0x48>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dc2:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <Get_SerialNum+0x4c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	4909      	ldr	r1, [pc, #36]	; (8008e00 <Get_SerialNum+0x50>)
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f814 	bl	8008e08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008de0:	2204      	movs	r2, #4
 8008de2:	4908      	ldr	r1, [pc, #32]	; (8008e04 <Get_SerialNum+0x54>)
 8008de4:	68b8      	ldr	r0, [r7, #8]
 8008de6:	f000 f80f 	bl	8008e08 <IntToUnicode>
  }
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	1fff7590 	.word	0x1fff7590
 8008df8:	1fff7594 	.word	0x1fff7594
 8008dfc:	1fff7598 	.word	0x1fff7598
 8008e00:	2000016a 	.word	0x2000016a
 8008e04:	2000017a 	.word	0x2000017a

08008e08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
 8008e1e:	e027      	b.n	8008e70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0f1b      	lsrs	r3, r3, #28
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d80b      	bhi.n	8008e40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4619      	mov	r1, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	440b      	add	r3, r1
 8008e38:	3230      	adds	r2, #48	; 0x30
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e00a      	b.n	8008e56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0f1b      	lsrs	r3, r3, #28
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	440b      	add	r3, r1
 8008e50:	3237      	adds	r2, #55	; 0x37
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	3301      	adds	r3, #1
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
 8008e70:	7dfa      	ldrb	r2, [r7, #23]
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d3d3      	bcc.n	8008e20 <IntToUnicode+0x18>
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <HAL_PCD_MspInit+0x44>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d113      	bne.n	8008ec2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <HAL_PCD_MspInit+0x48>)
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2014      	movs	r0, #20
 8008eb8:	f7f7 fedd 	bl	8000c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008ebc:	2014      	movs	r0, #20
 8008ebe:	f7f7 fef4 	bl	8000caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40005c00 	.word	0x40005c00
 8008ed0:	40021000 	.word	0x40021000

08008ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe fd48 	bl	8007980 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f7fe fd82 	bl	8007a2a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	440b      	add	r3, r1
 8008f4e:	333c      	adds	r3, #60	; 0x3c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7fe fdcb 	bl	8007af0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fedf 	bl	8007d34 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d001      	beq.n	8008f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f92:	f7f7 fba1 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008f9c:	7bfa      	ldrb	r2, [r7, #15]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe fe89 	bl	8007cb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fe35 	bl	8007c1c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fe84 	bl	8007cd8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <HAL_PCD_SuspendCallback+0x30>)
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	4a03      	ldr	r2, [pc, #12]	; (8008fec <HAL_PCD_SuspendCallback+0x30>)
 8008fde:	f043 0306 	orr.w	r3, r3, #6
 8008fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <HAL_PCD_ResumeCallback+0x34>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	4a07      	ldr	r2, [pc, #28]	; (8009024 <HAL_PCD_ResumeCallback+0x34>)
 8009006:	f023 0306 	bic.w	r3, r3, #6
 800900a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800900c:	f000 f9fa 	bl	8009404 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fe74 	bl	8007d04 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800901c:	bf00      	nop
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000ed00 	.word	0xe000ed00

08009028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009030:	4a2b      	ldr	r2, [pc, #172]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a29      	ldr	r2, [pc, #164]	; (80090e0 <USBD_LL_Init+0xb8>)
 800903c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009040:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009042:	4a28      	ldr	r2, [pc, #160]	; (80090e4 <USBD_LL_Init+0xbc>)
 8009044:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009046:	4b26      	ldr	r3, [pc, #152]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009048:	2208      	movs	r2, #8
 800904a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800904c:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <USBD_LL_Init+0xb8>)
 800904e:	2202      	movs	r2, #2
 8009050:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009054:	2202      	movs	r2, #2
 8009056:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <USBD_LL_Init+0xb8>)
 800905a:	2200      	movs	r2, #0
 800905c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009060:	2200      	movs	r2, #0
 8009062:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009064:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009066:	2200      	movs	r2, #0
 8009068:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <USBD_LL_Init+0xb8>)
 800906c:	2200      	movs	r2, #0
 800906e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009070:	481b      	ldr	r0, [pc, #108]	; (80090e0 <USBD_LL_Init+0xb8>)
 8009072:	f7f8 f995 	bl	80013a0 <HAL_PCD_Init>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800907c:	f7f7 fb2c 	bl	80006d8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009086:	2318      	movs	r3, #24
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	f7f9 fdaf 	bl	8002bee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009096:	2358      	movs	r3, #88	; 0x58
 8009098:	2200      	movs	r2, #0
 800909a:	2180      	movs	r1, #128	; 0x80
 800909c:	f7f9 fda7 	bl	8002bee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090a6:	23c0      	movs	r3, #192	; 0xc0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2181      	movs	r1, #129	; 0x81
 80090ac:	f7f9 fd9f 	bl	8002bee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ba:	2200      	movs	r2, #0
 80090bc:	2101      	movs	r1, #1
 80090be:	f7f9 fd96 	bl	8002bee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090cc:	2200      	movs	r2, #0
 80090ce:	2182      	movs	r1, #130	; 0x82
 80090d0:	f7f9 fd8d 	bl	8002bee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	2000115c 	.word	0x2000115c
 80090e4:	40005c00 	.word	0x40005c00

080090e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f8 fa33 	bl	800156a <HAL_PCD_Start>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f980 	bl	8009410 <USBD_Get_USB_Status>
 8009110:	4603      	mov	r3, r0
 8009112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	461a      	mov	r2, r3
 800912c:	4603      	mov	r3, r0
 800912e:	70fb      	strb	r3, [r7, #3]
 8009130:	460b      	mov	r3, r1
 8009132:	70bb      	strb	r3, [r7, #2]
 8009134:	4613      	mov	r3, r2
 8009136:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009146:	78bb      	ldrb	r3, [r7, #2]
 8009148:	883a      	ldrh	r2, [r7, #0]
 800914a:	78f9      	ldrb	r1, [r7, #3]
 800914c:	f7f8 fba2 	bl	8001894 <HAL_PCD_EP_Open>
 8009150:	4603      	mov	r3, r0
 8009152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f95a 	bl	8009410 <USBD_Get_USB_Status>
 800915c:	4603      	mov	r3, r0
 800915e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009160:	7bbb      	ldrb	r3, [r7, #14]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	4611      	mov	r1, r2
 8009188:	4618      	mov	r0, r3
 800918a:	f7f8 fbe9 	bl	8001960 <HAL_PCD_EP_Close>
 800918e:	4603      	mov	r3, r0
 8009190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f93b 	bl	8009410 <USBD_Get_USB_Status>
 800919a:	4603      	mov	r3, r0
 800919c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919e:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f8 fcaa 	bl	8001b20 <HAL_PCD_EP_SetStall>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f91c 	bl	8009410 <USBD_Get_USB_Status>
 80091d8:	4603      	mov	r3, r0
 80091da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	4611      	mov	r1, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f7f8 fcdd 	bl	8001bc4 <HAL_PCD_EP_ClrStall>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 f8fd 	bl	8009410 <USBD_Get_USB_Status>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921a:	7bbb      	ldrb	r3, [r7, #14]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009236:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800923c:	2b00      	cmp	r3, #0
 800923e:	da0c      	bge.n	800925a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	4613      	mov	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	440b      	add	r3, r1
 8009254:	3302      	adds	r3, #2
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	e00b      	b.n	8009272 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	00db      	lsls	r3, r3, #3
 800926a:	440b      	add	r3, r1
 800926c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009270:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7f8 fad4 	bl	800184a <HAL_PCD_SetAddress>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f8b1 	bl	8009410 <USBD_Get_USB_Status>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	460b      	mov	r3, r1
 80092ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092da:	7af9      	ldrb	r1, [r7, #11]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	f7f8 fbdb 	bl	8001a9a <HAL_PCD_EP_Transmit>
 80092e4:	4603      	mov	r3, r0
 80092e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f890 	bl	8009410 <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	460b      	mov	r3, r1
 800930c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800931c:	7af9      	ldrb	r1, [r7, #11]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f7f8 fb65 	bl	80019f0 <HAL_PCD_EP_Receive>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f86f 	bl	8009410 <USBD_Get_USB_Status>
 8009332:	4603      	mov	r3, r0
 8009334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009336:	7dbb      	ldrb	r3, [r7, #22]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7f8 fb87 	bl	8001a6a <HAL_PCD_EP_GetRxCount>
 800935c:	4603      	mov	r3, r0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <HAL_PCDEx_LPM_Callback+0x18>
 800937a:	2b01      	cmp	r3, #1
 800937c:	d013      	beq.n	80093a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800937e:	e023      	b.n	80093c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d007      	beq.n	8009398 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009388:	f000 f83c 	bl	8009404 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800938c:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <HAL_PCDEx_LPM_Callback+0x68>)
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009392:	f023 0306 	bic.w	r3, r3, #6
 8009396:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fcb0 	bl	8007d04 <USBD_LL_Resume>
    break;
 80093a4:	e010      	b.n	80093c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe fc93 	bl	8007cd8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	4a04      	ldr	r2, [pc, #16]	; (80093d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80093c0:	f043 0306 	orr.w	r3, r3, #6
 80093c4:	6113      	str	r3, [r2, #16]
    break;
 80093c6:	bf00      	nop
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	e000ed00 	.word	0xe000ed00

080093d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093dc:	4b03      	ldr	r3, [pc, #12]	; (80093ec <USBD_static_malloc+0x18>)
}
 80093de:	4618      	mov	r0, r3
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	200001a4 	.word	0x200001a4

080093f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009408:	f7f7 f8e8 	bl	80005dc <SystemClock_Config>
}
 800940c:	bf00      	nop
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	2b03      	cmp	r3, #3
 8009422:	d817      	bhi.n	8009454 <USBD_Get_USB_Status+0x44>
 8009424:	a201      	add	r2, pc, #4	; (adr r2, 800942c <USBD_Get_USB_Status+0x1c>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009443 	.word	0x08009443
 8009434:	08009449 	.word	0x08009449
 8009438:	0800944f 	.word	0x0800944f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
    break;
 8009440:	e00b      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009442:	2303      	movs	r3, #3
 8009444:	73fb      	strb	r3, [r7, #15]
    break;
 8009446:	e008      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	e005      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	73fb      	strb	r3, [r7, #15]
    break;
 8009452:	e002      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	bf00      	nop
  }
  return usb_status;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <__libc_init_array>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	4d0d      	ldr	r5, [pc, #52]	; (80094a0 <__libc_init_array+0x38>)
 800946c:	4c0d      	ldr	r4, [pc, #52]	; (80094a4 <__libc_init_array+0x3c>)
 800946e:	1b64      	subs	r4, r4, r5
 8009470:	10a4      	asrs	r4, r4, #2
 8009472:	2600      	movs	r6, #0
 8009474:	42a6      	cmp	r6, r4
 8009476:	d109      	bne.n	800948c <__libc_init_array+0x24>
 8009478:	4d0b      	ldr	r5, [pc, #44]	; (80094a8 <__libc_init_array+0x40>)
 800947a:	4c0c      	ldr	r4, [pc, #48]	; (80094ac <__libc_init_array+0x44>)
 800947c:	f000 f820 	bl	80094c0 <_init>
 8009480:	1b64      	subs	r4, r4, r5
 8009482:	10a4      	asrs	r4, r4, #2
 8009484:	2600      	movs	r6, #0
 8009486:	42a6      	cmp	r6, r4
 8009488:	d105      	bne.n	8009496 <__libc_init_array+0x2e>
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009490:	4798      	blx	r3
 8009492:	3601      	adds	r6, #1
 8009494:	e7ee      	b.n	8009474 <__libc_init_array+0xc>
 8009496:	f855 3b04 	ldr.w	r3, [r5], #4
 800949a:	4798      	blx	r3
 800949c:	3601      	adds	r6, #1
 800949e:	e7f2      	b.n	8009486 <__libc_init_array+0x1e>
 80094a0:	08009538 	.word	0x08009538
 80094a4:	08009538 	.word	0x08009538
 80094a8:	08009538 	.word	0x08009538
 80094ac:	0800953c 	.word	0x0800953c

080094b0 <memset>:
 80094b0:	4402      	add	r2, r0
 80094b2:	4603      	mov	r3, r0
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d100      	bne.n	80094ba <memset+0xa>
 80094b8:	4770      	bx	lr
 80094ba:	f803 1b01 	strb.w	r1, [r3], #1
 80094be:	e7f9      	b.n	80094b4 <memset+0x4>

080094c0 <_init>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr

080094cc <_fini>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr
